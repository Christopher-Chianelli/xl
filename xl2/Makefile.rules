#******************************************************************************
#  Christophe de Dinechin                                       XL PROJECT  
#  XL: Makefile.rules          (C) 2003 Christophe de Dinechin
#******************************************************************************
#
#  File Description:
#
#   Common rules for building the targets
#
#
#
#
#
#
#
#
#******************************************************************************
# This program is released under the GNU General Public License.
# See http://www.gnu.org/copyleft/gpl.html for details
#******************************************************************************
#* File       : $RCSFile$
#* Revision   : $Revision$
#* Date       : $Date$
#******************************************************************************

CPPFLAGS=	$(DEFINES) $(DEFINES_$(BUILDENV))	\
		$(DEFINES_all) $(DEFINES_$(TARGET))	\
		$(INCLUDES)
CFLAGS=		$(CPPFLAGS) $(CFLAGS_$(TARGET)) $(CFLAGS_all)
CXXFLAGS=	$(CPPFLAGS) $(CXXFLAGS_$(TARGET)) $(CXXFLAGS_all)
LDFLAGS=	$(LDFLAGS_$(TARGET)) $(LDFLAGS_all)

ifndef DIR
DIR=		$(shell pwd | (cd ./$(BROOT); sed -e s@$$(pwd)@@g))
endif
OBJROOT=        $(BROOT)obj/$(BUILDENV)/$(TARGET)
OBJDIR=		$(OBJROOT)$(DIR)
INCDIR=		$(BROOT)obj/$(BUILDENV)/include
OBJECTS=	$(SOURCES:%=$(OBJDIR)/%.o)
OBJLIBRARY=	$(LIBRARY:%=$(OBJROOT)/%)
OBJDRIVER=	$(DRIVER:%=$(OBJROOT)/%)
OBJEXE=		$(PRODUCT)
OBJLIBRARIES=	$(LIBRARIES:%.a=$(OBJROOT)/%.a)
OBJLIBDEP=	$(filter %.a, $(OBJLIBRARIES))
MZINFO_DEPS=	$(OBJLIBDEP)
GARBAGE=	*~ *.bak

# Default target
all: debug

everything: hello recurse build goodbye

debug opt:
	@$(MAKE) everything TARGET=$@ RECURSE=everything

clean: dirclean
	rm -rf $(BROOT)obj

dirclean:
	rm -f $(GARBAGE) $(TOCLEAN)
	$(MAKE) recurse RECURSE=dirclean

install: all

startup: clean all

depend: $(OBJDIR)/Makefile.depend

hello:
	@echo ----------- Making $(TARGET) in $$(pwd) ------------
goodbye:
	@echo ---------- Done with $(TARGET) in $$(pwd) ----------

build:									\
	prebuild							\
	$(OBJDIR) $(OBJECTS) $(OBJLIBRARY) $(OBJDRIVER) $(OBJEXE)	\
	postbuild

# "Hooks" for pre and post build steps
prebuild:
postbuild:


#------------------------------------------------------------------------------
#  General rules
#------------------------------------------------------------------------------

recurse: $(SUBDIRS:%=%.recurse)
%.recurse:
	@cd $*;								    \
	$(MAKE) BROOT=../$(BROOT) DIR=$(DIR)/$* TARGET=$(TARGET) $(RECURSE)

top-%:
	cd ./$(BROOT); $(MAKE) $*

v-%:
	$(MAKE) $* V= R= H=
s-%:
	$(MAKE) -s --no-print-directory $* 2> build.err
l-%:
	$(MAKE) v-$* 2>&1 | tee buildlog

#------------------------------------------------------------------------------
#  Product generation rules
#------------------------------------------------------------------------------

V=@if [ ! -z "$<" ]; then echo Compiling $<; fi;
R=@if [ ! -z "$@" ]; then echo Building $@; fi;
H=@

$(OBJDIR):
	$R mkdir -p $(OBJDIR)


$(OBJEXE) exe: $(OBJECTS) $(OBJLIBDEP)
	$R $(LD) $(LDFLAGS) $(LDFLAGS_$(OBJEXE))		\
		 $(OBJECTS) -L$(OBJROOT) $(OBJLIBRARIES) -o $(OBJEXE)

$(OBJLIBRARY) lib: $(OBJECTS)
	$R $(AR) -r $@ $(OBJECTS); $(RANLIB) $@

$(OBJDRIVER) dvr: $(OBJECTS) $(OBJLIBDEP)
	$R $(DRIVER_LD) $@ $(LDFLAGS) $(LDFLAGS_$*)		\
		 $(OBJECTS) -L$(OBJROOT) $(OBJLIBRARIES)


#------------------------------------------------------------------------------
#  Inference rules
#------------------------------------------------------------------------------

$(OBJDIR)/%.c.o: %.c
	$V $(CC) $(CFLAGS) $(CPPFLAGS_$*) $(CFLAGS_$*) -o $@ -c $<
$(OBJDIR)/%.C.o: %.C
	$V $(CXX) $(CXXFLAGS) $(CPPFLAGS_$*) $(CXXFLAGS_$*) -o $@ -c $<
$(OBJDIR)/%.cpp.o: %.cpp
	$V $(CXX) $(CXXFLAGS) $(CPPFLAGS_$*) $(CXXFLAGS_$*) -o $@ -c $<
$(MZINFO).mzinfo.cpp: # $(MZINFO_HEADER) $(MZINFO_SOURCES) $(MZINFO_DEPS)
	$R $(TPP)					\
		-t $(MZINFO)				\
		-i $(MZINFO).mzinfo.h			\
		-o $(MZINFO).mzinfo.cpp			\
		$(MZINFO_DEPS:%=-e %)			\
		$(MZINFO_HEADERS) -x $(MZINFO_SOURCES)

# Dependencies generation
CAT_DEPEND=sed								\
	-e 's@$(@:.mkdepend=).o:@$(OBJDIR)/$(@:.mkdepend=).o:@g' 	\
	-e 's@$*.o:@$(OBJDIR)/$(@:.mkdepend=).o:@g'	 		\
	< _tmp.depend >> $(OBJDIR)/_Makefile.depend &&			\
	rm -f _tmp.depend
$(OBJDIR)/Makefile.depend:
mkdepend: predepend $(SOURCES:%=%.mkdepend)
	@touch $(OBJDIR)/_Makefile.depend;			\
	mv $(OBJDIR)/_Makefile.depend $(OBJDIR)/Makefile.depend
predepend:
	@echo > $(OBJDIR)/_Makefile.depend
%.c.mkdepend:
	$V $(CC_DEPEND) $*.c && $(CAT_DEPEND)
%.C.mkdepend:
	$V $(CXX_DEPEND) $*.C && $(CAT_DEPEND)
%.cpp.mkdepend:
	$V $(CXX_DEPEND) $*.cpp && $(CAT_DEPEND)
%.S.mkdepend:
	$V $(AS_DEPEND) $*.S && $(CAT_DEPEND)
%.s.mkdepend:
	$V $(AS_DEPEND) $*.s && $(CAT_DEPEND)
%.mzinfo.cpp.mkdepend:
	@echo No dependency for $*.mzinfo.cpp
%.mzinfo.h.mkdepend:
	@echo No dependency for $*.mzinfo.h


# Include dependencies from current directory
ifdef SOURCES
-include $(OBJDIR)/Makefile.depend
endif
