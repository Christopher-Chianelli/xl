// ****************************************************************************
//  xl.semantics.xl                 (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//      This is the semantics phase of the XL compiler
//      It takes an XL tree as input, and returns an XL tree as output
//      after checking that the semantics are correct.
// 
//      The phase also performs what other compilers might call "expansion",
//      that is the generation of lower-level trees from high-level
//      constructs. The low-level constructs are found in XL.BYTECODE
//      and can be used to directly generate code.
// 
// 
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import PT = XL.PARSER.TREE
import SYM = XL.SYMBOLS
import ASCII = XL.TEXT_IO.ENCODING.ASCII
import XLT = XL.TRANSLATOR


module XL.SEMANTICS is
// ----------------------------------------------------------------------------
//    Implementation of XL semantics
// ----------------------------------------------------------------------------

    translation Declarations
    // ------------------------------------------------------------------------
    //   Processing declarations (goes into XL.TRANSLATOR.Declarations )
    // ------------------------------------------------------------------------

        // Sequences
        when
            'A'
            'B'
        then
            A := XLT.Declarations A
            B := XLT.Declarations B
            return quote
                'A'
                'B'
        when
            'A' ; 'B'
        then
            A := XLT.Declarations A
            B := XLT.Declarations B
            return quote
                'A' ; 'B'

        // When semantics have been done already, don't do it again
        when
            @ 'AsmStatement'
        then
            AsmStatement := nil
            return input


    translation Semantics
    // ------------------------------------------------------------------------
    //   Some basic semantics (goes into XL.TRANSLATOR.Semantics )
    // ------------------------------------------------------------------------

        // Sequences
        when
            'A'
            'B'
        then
            A := XLT.Semantics A
            B := XLT.Semantics B
            return quote
                'A'
                'B'
        when
            'A' ; 'B'
        then
            A := XLT.Semantics A
            B := XLT.Semantics B
            return quote
                'A' ; 'B'

        when
            'Thing'
        where
            Thing.kind = PT.xlBLOCK
        then
            block : Thing as PT.block_tree
            block.child := XLT.ScopeSemantics (block.child, false)
            return block


        // When semantics have been done already, don't do it again
        when
            @ 'AsmStatement'
        then
            AsmStatement := nil
            return input
