// ****************************************************************************
//  xl.semantics.xl                 (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//      This is the semantics phase of the XL compiler
//      It takes an XL tree as input, and returns an XL tree as output
//      after checking that the semantics are correct.
// 
//      The phase also performs what other compilers might call "expansion",
//      that is the generation of lower-level trees from high-level
//      constructs. The low-level constructs are found in XL.BYTECODE
//      and can be used to directly generate code.
// 
// 
// ****************************************************************************
// This document is released under the GNU Genral Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import PT = XL.PARSER.TREE
import ASCII = XL.TEXT_IO.ENCODING.ASCII

module XL.SEMANTICS is
// ----------------------------------------------------------------------------
//    Implementation of XL semantics
// ----------------------------------------------------------------------------


    type name_map is map [text, PT.tree]


    type symbol_table_data is record with
    // ------------------------------------------------------------------------
    //    Data stored in a symbol table
    // ------------------------------------------------------------------------
        depth     : integer
        objects   : name_map


    function Semantics (input : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //    Top-level semantics
    // ------------------------------------------------------------------------
        top_level_context : symbol_table
        top_level_context.depth := 0
        return ProgramSemantics (input, top_level_context)


    function ProgramSemantics (input : PT.tree;
                               context : symbol_table) return PT.tree is
    // ------------------------------------------------------------------------
    //   Program-level semantics
    // ------------------------------------------------------------------------
    //  Right now, the semantics are somewhat limited ;-)

        if input.kind = PT.xlINFIX then
            infix : PT.infix_tree := PT.infix_tree(input)
            if infix.name = ASCII.CR or infix.name = ";" then
                infix.left := ProgramSemantics (infix.left, context)
                infix.right := ProgramSemantics (infix.right, context)
                return infix
            else
                return InfixSemantics(infix, context)

        else if input.kind = PT.xlPREFIX then
            prefix : PT.prefix_tree := PT.prefix_tree(input)
            return PrefixSemantics (prefix, context)

        else if input.kind = PT.xlBLOCK then
            block : PT.block_tree := PT.block_tree(input)
            return BlockSemantics (block, context)

        // Default
        ERR.Error ERR.UnexpectedTopLevel, input.position, text(input)
        return input


    function InfixSemantics  (input : PT.infix_tree;
                              context : symbol_table) return BC.bytecode is
    // ------------------------------------------------------------------------
    //   Process infix operators
    // ------------------------------------------------------------------------
         return input


    function PrefixSemantics (input : PT.prefix_tree;
                              context : symbol_table) return BC.bytecode is
    // ------------------------------------------------------------------------
    //    Process prefix operators
    // ------------------------------------------------------------------------
        return input


    function BlockSemantics  (input : PT.block_tree;
                              context : symbol_table) return BC.bytecode is
    // ------------------------------------------------------------------------
    //    Process blocks
    // ------------------------------------------------------------------------
        return input


    
