// ****************************************************************************
//  xl.semantics.xl                 (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//      This is the semantics phase of the XL compiler
//      It takes an XL tree as input, and returns an XL tree as output
//      after checking that the semantics are correct.
// 
//      The phase also performs what other compilers might call "expansion",
//      that is the generation of lower-level trees from high-level
//      constructs. The low-level constructs are found in XL.BYTECODE
//      and can be used to directly generate code.
// 
// 
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import PT = XL.PARSER.TREE
import SYM = XL.SEMANTICS.SYMBOLS
import ASCII = XL.TEXT_IO.ENCODING.ASCII


module XL.SEMANTICS is
// ----------------------------------------------------------------------------
//    Implementation of XL semantics
// ----------------------------------------------------------------------------

    procedure InitSemantics is
    // ------------------------------------------------------------------------
    //    Initialization of the semantics module
    // ------------------------------------------------------------------------
        context := SYM.NewSymbolTable(nil)
        SemanticsPluginsInit()


    function Semantics (input : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //    Top-level semantics
    // ------------------------------------------------------------------------
        result := SYM.Lookup(context, input)


    semantics_translation
    // ------------------------------------------------------------------------
    //   Some basic semantics (goes into SemanticsPlugins)
    // ------------------------------------------------------------------------

        // Sequences
        when
            'A'
            'B'
        then
            A := Semantics A
            B := Semantics B
            return quote
                'A'
                'B'
        when
            'A' ; 'B'
        then
            A := Semantics A
            B := Semantics B
            return quote
                'A' ; 'B'

        when
            if 'Condition' then 'Expression'
        then
            IO.WriteLn "/* This is an 'if' statement */"
            return input
