#include <stdio.h>
typedef char                   xlint8;
typedef short                  xlint16;
typedef int                    xlint32;
typedef long long              xlint64;
typedef unsigned char          xluint8;
typedef unsigned short         xluint16;
typedef unsigned int           xluint32;
typedef unsigned long long     xluint64;
typedef float                  xlreal32;
typedef double                 xlreal64;
typedef int                    xlint;
typedef unsigned               xluint;
typedef double                 xlreal;
typedef char                   xlbool;
typedef char                   xlchar;
typedef const char *           xltext;
typedef void *                 xlptr;
typedef struct {} /* !ANSIC */ xlrecord, xlmodule;
typedef FILE *                 xlfile;
xlfile xl_getstdfile(int n) {
  switch(n) {
    case 0: return stdin;
    case 1: return stdout;
    case 2: return stderr;
  }
  return NULL;
}
typedef struct Record_1277 {
  xlmodule baserecord_1; /* RecF */
} Record_1277;
Record_1277 xlbuiltins_1278; /* Global */
xlint ret_1325; /* Temp */
xlint ret_1320; /* Temp */
xlint ret_1313; /* Temp */
xlint ret_1304; /* Temp */
xlreal ret_1357; /* Temp */
xlreal ret_1352; /* Temp */
xlint ret_1335; /* Temp */
xlint ret_1336; /* Temp */
xlreal ret_1345; /* Temp */
xlint k_1288; /* Global */
xlint l_1289; /* Global */
xlreal m_1290; /* Global */
xlreal z_1291; /* Global */
typedef xlint (*FnPtr_1301) ( xlint x_1297 , xlint var1294_1298 , xlint var1295_1299 , xlint var1296_1300 ) ;
xlint max_1302 ( xlint x_1297 , xlint var1294_1298 , xlint var1295_1299 , xlint var1296_1300 ) ;
typedef xlint (*FnPtr_1310) ( xlint x_1307 , xlint var1305_1308 , xlint var1306_1309 ) ;
xlint max_1311 ( xlint x_1307 , xlint var1305_1308 , xlint var1306_1309 ) ;
typedef xlint (*FnPtr_1317) ( xlint x_1315 , xlint var1314_1316 ) ;
xlint max_1318 ( xlint x_1315 , xlint var1314_1316 ) ;
typedef xlint (*FnPtr_1322) ( xlint x_1321 ) ;
xlint max_1323 ( xlint x_1321 ) ;
typedef xlreal (*FnPtr_1342) ( xlreal x_1339 , xlreal var1337_1340 , xlreal var1338_1341 ) ;
xlreal max_1343 ( xlreal x_1339 , xlreal var1337_1340 , xlreal var1338_1341 ) ;
typedef xlreal (*FnPtr_1349) ( xlreal x_1347 , xlreal var1346_1348 ) ;
xlreal max_1350 ( xlreal x_1347 , xlreal var1346_1348 ) ;
typedef xlreal (*FnPtr_1354) ( xlreal x_1353 ) ;
xlreal max_1355 ( xlreal x_1353 ) ;
xlreal ret_1364; /* Temp */
xlreal ret_1365; /* Temp */
xlint max_1323 ( xlint x_1321 ) {
xlint result_1324; /* Result */
ret_1325 = 0;
result_1324 = ret_1325;
result_1324 = x_1321;
goto exit_max_1323;
exit_max_1323: 0;
return result_1324;
}
xlint max_1318 ( xlint x_1315 , xlint var1314_1316 ) {
xlint ret_1326; /* Temp */
xlbool ret_1328; /* Temp */
xlint result_1319; /* Result */
ret_1320 = 0;
result_1319 = ret_1320;
ret_1326 = max_1323 ( var1314_1316 );
result_1319 = ret_1326;
ret_1328 = result_1319 < x_1315;
if(!(ret_1328)) goto else_if_1327;
result_1319 = x_1315;
else_if_1327: 0;
exit_max_1318: 0;
return result_1319;
}
xlint max_1311 ( xlint x_1307 , xlint var1305_1308 , xlint var1306_1309 ) {
xlint ret_1329; /* Temp */
xlbool ret_1331; /* Temp */
xlint result_1312; /* Result */
ret_1313 = 0;
result_1312 = ret_1313;
ret_1329 = max_1318 ( var1305_1308 , var1306_1309 );
result_1312 = ret_1329;
ret_1331 = result_1312 < x_1307;
if(!(ret_1331)) goto else_if_1330;
result_1312 = x_1307;
else_if_1330: 0;
exit_max_1311: 0;
return result_1312;
}
xlint max_1302 ( xlint x_1297 , xlint var1294_1298 , xlint var1295_1299 , xlint var1296_1300 ) {
xlint ret_1332; /* Temp */
xlbool ret_1334; /* Temp */
xlint result_1303; /* Result */
ret_1304 = 0;
result_1303 = ret_1304;
ret_1332 = max_1311 ( var1294_1298 , var1295_1299 , var1296_1300 );
result_1303 = ret_1332;
ret_1334 = result_1303 < x_1297;
if(!(ret_1334)) goto else_if_1333;
result_1303 = x_1297;
else_if_1333: 0;
exit_max_1302: 0;
return result_1303;
}
xlreal max_1355 ( xlreal x_1353 ) {
xlreal result_1356; /* Result */
ret_1357 = 0.0;
result_1356 = ret_1357;
result_1356 = x_1353;
goto exit_max_1355;
exit_max_1355: 0;
return result_1356;
}
xlreal max_1350 ( xlreal x_1347 , xlreal var1346_1348 ) {
xlreal ret_1358; /* Temp */
xlbool ret_1360; /* Temp */
xlreal result_1351; /* Result */
ret_1352 = 0.0;
result_1351 = ret_1352;
ret_1358 = max_1355 ( var1346_1348 );
result_1351 = ret_1358;
ret_1360 = result_1351 < x_1347;
if(!(ret_1360)) goto else_if_1359;
result_1351 = x_1347;
else_if_1359: 0;
exit_max_1350: 0;
return result_1351;
}
xlreal max_1343 ( xlreal x_1339 , xlreal var1337_1340 , xlreal var1338_1341 ) {
xlreal ret_1361; /* Temp */
xlbool ret_1363; /* Temp */
xlreal result_1344; /* Result */
ret_1345 = 0.0;
result_1344 = ret_1345;
ret_1361 = max_1350 ( var1337_1340 , var1338_1341 );
result_1344 = ret_1361;
ret_1363 = result_1344 < x_1339;
if(!(ret_1363)) goto else_if_1362;
result_1344 = x_1339;
else_if_1362: 0;
exit_max_1343: 0;
return result_1344;
}
int main(int _argc, char **_argv)
{
xlint ret_1325; /* Temp */
xlint ret_1320; /* Temp */
xlint ret_1313; /* Temp */
xlint ret_1304; /* Temp */
xlreal ret_1357; /* Temp */
xlreal ret_1352; /* Temp */
xlint ret_1335; /* Temp */
xlint ret_1336; /* Temp */
xlreal ret_1345; /* Temp */
xlreal ret_1364; /* Temp */
xlreal ret_1365; /* Temp */
ret_1335 = max_1302 ( 1 , 2 , 3 , 4 );
k_1288 = ret_1335;
ret_1336 = max_1311 ( 1 , 2 , 3 );
l_1289 = ret_1336;
ret_1364 = max_1343 ( 1.5 , 7.9 , 8.43 );
m_1290 = ret_1364;
ret_1365 = max_1343 ( 0 , 0 , 0.1 );
z_1291 = ret_1365;
/* Type */
    /* Main */
    return 0;
}
/*end*/
