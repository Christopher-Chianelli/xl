#include <stdio.h>
typedef char                   xlint8;
typedef short                  xlint16;
typedef int                    xlint32;
typedef long long              xlint64;
typedef unsigned char          xluint8;
typedef unsigned short         xluint16;
typedef unsigned int           xluint32;
typedef unsigned long long     xluint64;
typedef float                  xlreal32;
typedef double                 xlreal64;
typedef int                    xlint;
typedef unsigned               xluint;
typedef double                 xlreal;
typedef char                   xlbool;
typedef char                   xlchar;
typedef const char *           xltext;
typedef void *                 xlptr;
typedef struct {} /* !ANSIC */ xlrecord, xlmodule;
typedef FILE *                 xlfile;
xlfile xl_getstdfile(int n) {
  switch(n) {
    case 0: return stdin;
    case 1: return stdout;
    case 2: return stderr;
  }
  return NULL;
}
typedef xlint (*FnPtr_1279) ( xlint low_1277 , xlint high_1278 ) ;
typedef xlint (*FnPtr_1285) ( xlint low_1282 , xlint high_1283 , xlint incr_1284 ) ;
typedef xlreal (*FnPtr_1291) ( xlreal low_1288 , xlreal high_1289 , xlreal incr_1290 ) ;
typedef struct Record_1294 {
  xlmodule baserecord_1; /* RecF */
  FnPtr_1279 iterator_1280; /* RecF */
  FnPtr_1285 iterator_1286; /* RecF */
  FnPtr_1291 iterator_1292; /* RecF */
} Record_1294;
Record_1294 xlbuiltins_1295; /* Global */
xlint k_1305; /* Global */
xlint l_1306; /* Global */
xlreal m_1307; /* Global */
xlreal z_1308; /* Global */
typedef xlint (*FnPtr_1318) ( xlint x_1314 , xlint var1311_1315 , xlint var1312_1316 , xlint var1313_1317 ) ;
xlint max_1319 ( xlint x_1314 , xlint var1311_1315 , xlint var1312_1316 , xlint var1313_1317 ) ;
typedef xlint (*FnPtr_1327) ( xlint x_1324 , xlint var1322_1325 , xlint var1323_1326 ) ;
xlint max_1328 ( xlint x_1324 , xlint var1322_1325 , xlint var1323_1326 ) ;
typedef xlint (*FnPtr_1334) ( xlint x_1332 , xlint var1331_1333 ) ;
xlint max_1335 ( xlint x_1332 , xlint var1331_1333 ) ;
typedef xlint (*FnPtr_1339) ( xlint x_1338 ) ;
xlint max_1340 ( xlint x_1338 ) ;
typedef xlreal (*FnPtr_1359) ( xlreal x_1356 , xlreal var1354_1357 , xlreal var1355_1358 ) ;
xlreal max_1360 ( xlreal x_1356 , xlreal var1354_1357 , xlreal var1355_1358 ) ;
typedef xlreal (*FnPtr_1366) ( xlreal x_1364 , xlreal var1363_1365 ) ;
xlreal max_1367 ( xlreal x_1364 , xlreal var1363_1365 ) ;
typedef xlreal (*FnPtr_1371) ( xlreal x_1370 ) ;
xlreal max_1372 ( xlreal x_1370 ) ;
xlint max_1340 ( xlint x_1338 ) {
/* xlint result_1341; Parm */
xlint ret_1342; /* Temp */
xlint result_1341; /* Result */
ret_1342 = 0;
result_1341 = ret_1342;
result_1341 = x_1338;
goto exit_max_1340;
exit_max_1340: 0;
return result_1341;
}
xlint max_1335 ( xlint x_1332 , xlint var1331_1333 ) {
/* xlint result_1336; Parm */
xlint ret_1337; /* Temp */
xlint ret_1343; /* Temp */
xlbool ret_1345; /* Temp */
xlint result_1336; /* Result */
ret_1337 = 0;
result_1336 = ret_1337;
ret_1343 = max_1340 ( var1331_1333 );
result_1336 = ret_1343;
ret_1345 = result_1336 < x_1332;
if(!(ret_1345)) goto else_if_1344;
result_1336 = x_1332;
else_if_1344: 0;
exit_max_1335: 0;
return result_1336;
}
xlint max_1328 ( xlint x_1324 , xlint var1322_1325 , xlint var1323_1326 ) {
/* xlint result_1329; Parm */
xlint ret_1330; /* Temp */
xlint ret_1346; /* Temp */
xlbool ret_1348; /* Temp */
xlint result_1329; /* Result */
ret_1330 = 0;
result_1329 = ret_1330;
ret_1346 = max_1335 ( var1322_1325 , var1323_1326 );
result_1329 = ret_1346;
ret_1348 = result_1329 < x_1324;
if(!(ret_1348)) goto else_if_1347;
result_1329 = x_1324;
else_if_1347: 0;
exit_max_1328: 0;
return result_1329;
}
xlint max_1319 ( xlint x_1314 , xlint var1311_1315 , xlint var1312_1316 , xlint var1313_1317 ) {
/* xlint result_1320; Parm */
xlint ret_1321; /* Temp */
xlint ret_1349; /* Temp */
xlbool ret_1351; /* Temp */
xlint result_1320; /* Result */
ret_1321 = 0;
result_1320 = ret_1321;
ret_1349 = max_1328 ( var1311_1315 , var1312_1316 , var1313_1317 );
result_1320 = ret_1349;
ret_1351 = result_1320 < x_1314;
if(!(ret_1351)) goto else_if_1350;
result_1320 = x_1314;
else_if_1350: 0;
exit_max_1319: 0;
return result_1320;
}
xlreal max_1372 ( xlreal x_1370 ) {
/* xlreal result_1373; Parm */
xlreal ret_1374; /* Temp */
xlreal result_1373; /* Result */
ret_1374 = 0.0;
result_1373 = ret_1374;
result_1373 = x_1370;
goto exit_max_1372;
exit_max_1372: 0;
return result_1373;
}
xlreal max_1367 ( xlreal x_1364 , xlreal var1363_1365 ) {
/* xlreal result_1368; Parm */
xlreal ret_1369; /* Temp */
xlreal ret_1375; /* Temp */
xlbool ret_1377; /* Temp */
xlreal result_1368; /* Result */
ret_1369 = 0.0;
result_1368 = ret_1369;
ret_1375 = max_1372 ( var1363_1365 );
result_1368 = ret_1375;
ret_1377 = result_1368 < x_1364;
if(!(ret_1377)) goto else_if_1376;
result_1368 = x_1364;
else_if_1376: 0;
exit_max_1367: 0;
return result_1368;
}
xlreal max_1360 ( xlreal x_1356 , xlreal var1354_1357 , xlreal var1355_1358 ) {
/* xlreal result_1361; Parm */
xlreal ret_1362; /* Temp */
xlreal ret_1378; /* Temp */
xlbool ret_1380; /* Temp */
xlreal result_1361; /* Result */
ret_1362 = 0.0;
result_1361 = ret_1362;
ret_1378 = max_1367 ( var1354_1357 , var1355_1358 );
result_1361 = ret_1378;
ret_1380 = result_1361 < x_1356;
if(!(ret_1380)) goto else_if_1379;
result_1361 = x_1356;
else_if_1379: 0;
exit_max_1360: 0;
return result_1361;
}
int main(int _argc, char **_argv)
{
xlint ret_1352; /* Temp */
xlint ret_1353; /* Temp */
xlreal ret_1381; /* Temp */
xlreal ret_1382; /* Temp */
ret_1352 = max_1319 ( 1 , 2 , 3 , 4 );
k_1305 = ret_1352;
ret_1353 = max_1328 ( 1 , 2 , 3 );
l_1306 = ret_1353;
ret_1381 = max_1360 ( 1.5 , 7.9 , 8.43 );
m_1307 = ret_1381;
ret_1382 = max_1360 ( 0 , 0 , 0.1 );
z_1308 = ret_1382;
/* Type */
    /* Main */
    return 0;
}
/*end*/
