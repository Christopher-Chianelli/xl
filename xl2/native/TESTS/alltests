#******************************************************************************
#  Christophe de Dinechin                                          XL PROJECT
#  XL COMPILER TESTS: alltests
#******************************************************************************
#
#  File Description:
#
#    Script for testing the compiler
#
#    This file runs through every possible test. It looks for all files
#    ending in .test below the current directory, and executes them.
#
#
#
#
#
#******************************************************************************
#This document is distributed under the GNU General Public License
#See the enclosed COPYING file or http://www.gnu.org for information
#******************************************************************************
#* File       : $RCSFile$
#* Revision   : $Revision$
#* Date       : $Date$
#******************************************************************************

# Environment - Note that 'xl' is typically a symbolic link to real compiler
TESTDIR=$(pwd)
XL=./nxl
SUCCESS=$TESTDIR/success.out
FAILURE=$TESTDIR/failure.out
PASS="pass"
ONE_FAILED=
PATTERN='[A-Za-z]*'
UPDATE=
DORUN=
COMPILE=
if [ "$1" == '-c++' ]; then DORUN=./a.out; COMPILE=./a.out; shift; fi
if [ "$1" == "-update" -o "$1" == "-u" ]; then
   shift; UPDATE='*'$1'*'; PATTERN="$UPDATE"; shift;
fi
if [ ! -z "$1" ]; then PATTERN='*'"$1"'*'; shift; fi

export TESTDIR XL SUCCESS FAILURE PASS UPDATE

# Make sure the proper files are linked in place
ln -sf ../xl.bytecode .
ln -sf ../xl.syntax .
ln -sf ../xl_lib.h .
ln -sf ../*.stylesheet .
ln -sf ../nxl .

# Cleanup the test results
echo Tests successfully run on $(date) on $HOSTNAME > $SUCCESS
echo Failed tests on $(date) on $HOSTNAME > $FAILURE
rm -rf $TESTDIR/.xl

export XL

# Look for all possible tests in the test directory
for TEST in $(find $TESTDIR -name "$PATTERN".xl -print)
do
    TESTNAME=${TEST/$TESTDIR\/}
    echo -n Test: $TESTNAME...

    # Setup useful variables
    BASE=${TESTNAME/\.xl}
    REF=$BASE.ref
    LOG=$BASE.log
    CMD=
    EXIT=0
    RUN=
    COMPILE=
    OPT="-I $(dirname $TEST)"

    # Extract interesting variables
    eval $(./alltests.awk $TESTNAME)
    [ -z "$CMD" ] && { CMD="$XL $OPT $TESTNAME"; RUN=$DORUN; COMPILE=./a.out; }

    # Run the test
    THIS_FAILED=
    ( $CMD ) > $LOG 2>&1
    RC=$?

    # Try to compile the resulting C++
    if [ $EXIT -eq 0 ]; then
        if [ $RC -eq 0 ]; then
            if [ -z "$RUN" ]; then
                if [ ! -z "$COMPILE" ]; then
                    if [ -f "$BASE.cpp" ]; then
                        if diff -q $LOG $BASE.cpp 2> /dev/null; then
                            cp $REF $LOG
                        else
                            RUN=$COMPILE
                        fi
                    else
                        RUN=$COMPILE
                    fi
                fi
            fi
            if [ ! -z "$RUN" ]; then
                rm -f ./a.out
                cp $LOG $BASE.cpp
                echo -n C++...
                c++ -I. $BASE.cpp > $LOG 2>&1
                if [ -x ./a.out ] ; then
                    $RUN > $LOG 2>&1
                    RC=$?
                else
                    # Make sure we don't optimize test away until it works
                    echo "*** Compilation errors on " $(date) " ***">> $BASE.cpp
                    cat $LOG >> $BASE.cpp
                fi
            fi
        fi
    fi

    # Analyze the results
    if [ $RC -ne $EXIT ]; then
        THIS_FAILED="Exit code $RC, expected $EXIT"
    elif [ ! -z "$REF" ]; then
        if diff -q $REF $LOG 2> /dev/null; then
            THIS=ok
        elif [ ! -z "$UPDATE" ]; then
            echo "Updating reference for " $BASE
            mv -f $REF $REF.old
            cp $LOG $REF
        elif [ -f $REF ]; then
            THIS_FAILED="Output mismatch"
            diff $REF $LOG > $LOG.diff
            mv $LOG.diff $LOG
            if [ -f $BASE.cpp ]; then
               echo "*** Execution error on " $(date) " ***" >> $BASE.cpp
               cat $LOG >> $BASE.cpp
            fi
        else
            THIS_FAILED="Missing reference"
        fi
    elif [ ! -z "$GREP" ]; then
        if $GREP $LOG; then
            THIS=ok
        else
            THIS_FAILED="No pattern match"
        fi
    fi

    if [ -z "$THIS_FAILED" ]; then
        echo $TEST >> $SUCCESS
        if [ "$RC" -ne "0" ] ; then
            echo Success - negative test;
        else
            echo Success;
        fi
        rm -f $LOG $OUTPUT
    else
        echo $TEST:  $THIS_FAILED >> $FAILURE
        cat $LOG >> $FAILURE
        echo '*** FAILURE ***'
        ONE_FAILED=1
    fi
    rm -f ./a.out
done

if [ "$ONE_FAILED" ]; then echo; echo '*** FAILURES: ***' ; cat $FAILURE; fi
