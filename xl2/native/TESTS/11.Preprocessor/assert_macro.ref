#include <stdio.h>
typedef char                   xlint8;
typedef short                  xlint16;
typedef int                    xlint32;
typedef long long              xlint64;
typedef unsigned char          xluint8;
typedef unsigned short         xluint16;
typedef unsigned int           xluint32;
typedef unsigned long long     xluint64;
typedef float                  xlreal32;
typedef double                 xlreal64;
typedef int                    xlint;
typedef unsigned               xluint;
typedef double                 xlreal;
typedef char                   xlbool;
typedef char                   xlchar;
typedef const char *           xltext;
typedef void *                 xlptr;
typedef struct {} /* !ANSIC */ xlrecord, xlmodule;
typedef FILE *                 xlfile;
xlfile xl_getstdfile(int n) {
  switch(n) {
    case 0: return stdin;
    case 1: return stdout;
    case 2: return stderr;
  }
  return NULL;
}
typedef struct Record_1245 {
  xlmodule baserecord_1; /* RecF */
} Record_1245;
Record_1245 xlbuiltins_1246; /* Global */
typedef void (*FnPtr_1250) ( xltext msg_1247 , xltext file_1248 , xlint line_1249 ) ;
void myassertionfailure_1251 ( xltext msg_1247 , xltext file_1248 , xlint line_1249 ) ;
typedef void (*FnPtr_1254) ( xlint x_1252 , xlint y_1253 ) ;
void testit_1255 ( xlint x_1252 , xlint y_1253 ) ;
void myassertionfailure_1251 ( xltext msg_1247 , xltext file_1248 , xlint line_1249 ) {
xlint ret_1256; /* Temp */
ret_1256 = line_1249 - 1;
line_1249 = ret_1256;
exit_myassertionfailure_1251: 0;
}
void testit_1255 ( xlint x_1252 , xlint y_1253 ) {
xlint ret_1258; /* Temp */
xlbool ret_1259; /* Temp */
xlbool ret_1260; /* Temp */
ret_1258 = x_1252 + y_1253;
ret_1259 = ret_1258 < 34;
ret_1260 = !ret_1259;
if(!(ret_1260)) goto else_if_1257;
myassertionfailure_1251 ( "X + Y < 34" , "11.Preprocessor/assert_macro.xl" , 27 );
else_if_1257: 0;
exit_testit_1255: 0;
}
int main(int _argc, char **_argv)
{
    /* Main */
    return 0;
}
/*end*/
