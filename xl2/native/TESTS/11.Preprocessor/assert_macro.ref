#include <stdio.h>
typedef char                   xlint8;
typedef short                  xlint16;
typedef int                    xlint32;
typedef long long              xlint64;
typedef unsigned char          xluint8;
typedef unsigned short         xluint16;
typedef unsigned int           xluint32;
typedef unsigned long long     xluint64;
typedef float                  xlreal32;
typedef double                 xlreal64;
typedef int                    xlint;
typedef unsigned               xluint;
typedef double                 xlreal;
typedef char                   xlbool;
typedef char                   xlchar;
typedef const char *           xltext;
typedef void *                 xlptr;
typedef struct {} /* !ANSIC */ xlrecord, xlmodule;
typedef FILE *                 xlfile;
xlfile xl_getstdfile(int n) {
  switch(n) {
    case 0: return stdin;
    case 1: return stdout;
    case 2: return stderr;
  }
  return NULL;
}
typedef struct Record_1277 {
  xlmodule baserecord_1; /* RecF */
} Record_1277;
Record_1277 xlbuiltins_1278; /* Global */
typedef void (*FnPtr_1282) ( xltext msg_1279 , xltext file_1280 , xlint line_1281 ) ;
void myassertionfailure_1283 ( xltext msg_1279 , xltext file_1280 , xlint line_1281 ) ;
typedef void (*FnPtr_1286) ( xlint x_1284 , xlint y_1285 ) ;
void testit_1287 ( xlint x_1284 , xlint y_1285 ) ;
void myassertionfailure_1283 ( xltext msg_1279 , xltext file_1280 , xlint line_1281 ) {
xlint ret_1288; /* Temp */
ret_1288 = line_1281 - 1;
line_1281 = ret_1288;
exit_myassertionfailure_1283: 0;
}
void testit_1287 ( xlint x_1284 , xlint y_1285 ) {
xlint ret_1290; /* Temp */
xlbool ret_1291; /* Temp */
xlbool ret_1292; /* Temp */
ret_1290 = x_1284 + y_1285;
ret_1291 = ret_1290 < 34;
ret_1292 = !ret_1291;
if(!(ret_1292)) goto else_if_1289;
myassertionfailure_1283 ( "X + Y < 34" , "11.Preprocessor/assert_macro.xl" , 27 );
else_if_1289: 0;
exit_testit_1287: 0;
}
int main(int _argc, char **_argv)
{
    /* Main */
    return 0;
}
/*end*/
