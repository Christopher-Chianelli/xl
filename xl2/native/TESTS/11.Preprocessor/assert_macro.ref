#include <stdio.h>
typedef char                   xlint8;
typedef short                  xlint16;
typedef int                    xlint32;
typedef long long              xlint64;
typedef unsigned char          xluint8;
typedef unsigned short         xluint16;
typedef unsigned int           xluint32;
typedef unsigned long long     xluint64;
typedef float                  xlreal32;
typedef double                 xlreal64;
typedef int                    xlint;
typedef unsigned               xluint;
typedef double                 xlreal;
typedef char                   xlbool;
typedef char                   xlchar;
typedef const char *           xltext;
typedef void *                 xlptr;
typedef struct {} /* !ANSIC */ xlrecord, xlmodule;
typedef FILE *                 xlfile;
xlfile xl_getstdfile(int n) {
  switch(n) {
    case 0: return stdin;
    case 1: return stdout;
    case 2: return stderr;
  }
  return NULL;
}
typedef struct Record_954 {
  xlmodule base_1;
} Record_954;
Record_954 xlbuiltins_955; /* Global */
typedef void (*FnPtr_959) ( xltext msg_956 , xltext file_957 , xlint line_958 ) ;
void myassertionfailure_960 ( xltext msg_956 , xltext file_957 , xlint line_958 ) ;
typedef void (*FnPtr_963) ( xlint x_961 , xlint y_962 ) ;
void testit_964 ( xlint x_961 , xlint y_962 ) ;
void myassertionfailure_960 ( xltext msg_956 , xltext file_957 , xlint line_958 ) {
xlint ret_965; /* Temp */
ret_965 = line_958 - 1;
line_958 = ret_965;
exit_myassertionfailure_960: 0;
}
void testit_964 ( xlint x_961 , xlint y_962 ) {
xlint ret_967; /* Temp */
xlbool ret_968; /* Temp */
xlbool ret_969; /* Temp */
ret_967 = x_961 + y_962;
ret_968 = ret_967 < 34;
ret_969 = !ret_968;
if(!(ret_969)) goto else_if_966;
myassertionfailure_960 ( "X + Y < 34" , "11.Preprocessor/assert_macro.xl" , 27 );
else_if_966: 0;
exit_testit_964: 0;
}
int main(int _argc, char **_argv)
{
    /* Main */
    return 0;
}
/*end*/
