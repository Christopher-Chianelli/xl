// Implement an 'assert' macro, using elements like position, etc
// We have one case here that is false at compile time, so...
// EXIT=2
// The message should indicate which asserts are false at compile time

// Evaluate the expression, expand the condition as text
transform (my_assert('cond')) into (my_assert_implementation(xl.value('cond'), xl.text('cond'), 'cond'))

// Check the constant cases for static asserts
transform (my_assert_implementation(true, 'message', 'source')) into (@nop)
transform (my_assert_implementation(false, 'message', 'source')) into (xl.error ("Assertion '$1' is false at compile time", 'source'))

// Otherwise, expand to a runtime test
transform (my_assert_implementation('cond', 'msg', 'src')) into (if not ('cond') then my_assertion_failure ('msg', xl.file('src'), xl.line('src')))

// Tests
procedure my_assertion_failure(msg : text; file : text; line : integer) is
    line := line - 1

procedure test_it(X : integer; Y : integer) is
    my_assert (1 > 2)
    my_assert (2 + 1 < 3)
    my_assert (X + Y < 34)

