#define XLINIT 1
#include "xl_lib.h"
typedef char Int8;
typedef short Int16;
typedef int Int32;
typedef unsigned char UInt8;
typedef unsigned short UInt16;
typedef unsigned int UInt32;
typedef float Real32;
typedef double Real64;
typedef /*long - causes GCC warning*/ double Real80;
typedef Int32 Int;
typedef UInt32 UInt;
typedef Real64 Real;
typedef char Bool;
typedef wchar_t Char;
typedef ::text Text;
Int copy_3 ( Int src_2 ) ;
typedef struct Record_6 {
  Int x_4;
  Int y_5;
} Record_6;
Record_6 z_7;
Int foo_8 ( ) ;
Int k_9;
#define XL_Term()
void XL_Init() {
Int fld_15; /* Temp */
fld_15 = z_7.x_4;
k_9 = fld_15;
}
/* Type */
Int foo_8 ( ) {
Int i_11; /* Local */
Int fld_12; /* Temp */
Int fld_13; /* Temp */
Int fld_14; /* Temp */
Int result_10; /* Result */
{
fld_12 = z_7.x_4;
i_11 = fld_12;
i_11 = 1;
fld_13 = z_7.x_4;
i_11 = fld_13;
fld_14 = z_7.x_4;
result_10 = fld_14;
goto exit_foo_8;
}
exit_foo_8: 0;
return result_10;
}
namespace xl { namespace ui { namespace console {
std::vector< ::text > arguments;
}}}
void XLMain() {
   XL_Init();
   XL_Term();
}
namespace xl { namespace translator {
void pluginsinit() {

}
}}
void XLInit() {

}
void XLTerm() {

}
char XLTrace[1] = { 0 };
void XLTraceInit(int Argc, char **Argv) {
int Arg; for (Arg = 1; Arg < Argc; Arg++) {
::text N = Argv[Arg];
}}
/*end*/
