// ****************************************************************************
//  xl.errors.xl                    (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Errors for the XL compiler
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This program is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import IO = XL.TEXT_IO
import POS = XL.SCANNER.POSITION

module XL.ERRORS is
// ----------------------------------------------------------------------------
//    Elementary module for error handling
// ----------------------------------------------------------------------------

    function Localize (E : text) return text is
    // ------------------------------------------------------------------------
    //   Temporary: localization is off at this point
    // ------------------------------------------------------------------------
        return E


    type error_stack_element is record with
        message         : text
        position        : integer
    type error_stack_level is string of error_stack_element
    error_stack         : string of error_stack_level
    last_errors         : error_stack_level
    last_errors_to_keep : integer := 0


    procedure PushErrorContext() is
    // ------------------------------------------------------------------------
    //    Push a new output string stream to store errors
    // ------------------------------------------------------------------------
        level : error_stack_level
        error_stack += level
        if last_errors_to_keep > 0 then
            last_errors_to_keep += 1


    function PopErrorContext() return boolean is
    // ------------------------------------------------------------------------
    //   Pop last string stream for errors
    // ------------------------------------------------------------------------
        last : error_stack_level := back(error_stack)
        if last_errors_to_keep > 0 then
            last_errors_to_keep -= 1
        else
            last_errors := last
        pop_back error_stack
        return size(last) > 0


    function PreserveLastErrors(offset : integer) return integer is
    // ------------------------------------------------------------------------
    //   Make sure that we do not overwrite a useful last_errors
    // ------------------------------------------------------------------------
        last_errors_to_keep += offset
        return last_errors_to_keep


    procedure DisplayLastErrors() is
    // ------------------------------------------------------------------------
    //   Display the last errors
    // ------------------------------------------------------------------------
        if size(error_stack) > 0 then
            back(error_stack) += last_errors
        else
            E : error_stack_element
            for E in last_errors loop
                Error E.message, E.position


    function LastErrorsText() return text is
    // ------------------------------------------------------------------------
    //   Return the text for the very last errors
    // ------------------------------------------------------------------------
        if size(last_errors) > 0 then
            E : error_stack_element := last_errors[0]
            result := E.message


    function PendingErrors() return integer is
    // ------------------------------------------------------------------------
    //    Return the number of errors at the current level
    // ------------------------------------------------------------------------
        if size(error_stack) > 0 then
            return size(back(error_stack))
        return error_count


    procedure Error (E : text; pos : integer; args : string of text) is
    // ------------------------------------------------------------------------
    //    Report the given error
    // ------------------------------------------------------------------------
        file      : text
        line      : integer
        column    : integer
        linetext  : text
        msg       : text
        fmt       : text
        I         : integer
        Max       : integer
        hadDollar : boolean := false
        arg       : text

        // Eliminate internal errors, those that refer to bytecode (@)
        for arg in args loop
            C : character
            for C in arg loop
                if C = '@' then
                    return

        // Get message and perform substitution
        msg := Localize E
        Max := length msg
        for I in 0..Max-1 loop
            C : character := msg[I]
            if C = '$' then
                if hadDollar then
                    fmt += "$"
                    hadDollar := false
                else
                    hadDollar := true
            else if hadDollar then
                if C >= '1' and C <= '9' then
                    fmt += args[integer(C) - integer('1')]
                hadDollar := false
            else
                fmt += C

        trace[errors] "Error @", pos, ": ", fmt

        if size(error_stack) > 0 then
            E : error_stack_element
            E.message := fmt
            E.position := pos
            back(error_stack) += E
        else
            error_count += 1

            // Convert positon to line and column
            if pos = -1 then
                IO.WriteLn "[Compiler generated] ", fmt
            else
                POS.PositionToLine pos, file, line, column, linetext

                // Display message
                if file <> "" then
                    IO.WriteLn file, ":", line, ": ", fmt

                    // Display line contents and caret
                    IO.Writeln "| ", linetext
                    IO.Write   "|_"
                    while column > 0 loop
                        IO.Write "_"
                        column -= 1
                    IO.writeln "^"
                else
                    IO.WriteLn "[Unknown position] ", fmt


    procedure Error (E : text; pos : integer) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        Error E, pos, args


    procedure Error (E : text; pos : integer; arg : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        Error E, pos, args


    procedure Error (E : text; pos : integer; arg : text; arg2 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        args += arg2
        Error E, pos, args


    procedure Error (E : text;
                     pos : integer;
                     arg : text; arg2 : text; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        args += arg2
        args += arg3
        Error E, pos, args


    function ArgPosition(arg : PT.tree) return integer is
    // ------------------------------------------------------------------------
    //    Return the position for an input argument
    // ------------------------------------------------------------------------
        if arg <> nil then
            return arg.position
        return PT.NOPOS


    procedure Error (E : text; arg : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += arg2
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += text arg2
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : text; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += arg2
        args += arg3
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : text; arg3 : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += arg2
        args += text arg3
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : PT.tree; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += text arg2
        args += arg3
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg:PT.tree; arg2:PT.tree; arg3:PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += text arg2
        args += text arg3
        Error E, ArgPosition(arg), args
