// ****************************************************************************
//  xl.errors.xl                    (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Errors for the XL compiler
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This program is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import IO = XL.TEXT_IO
import POS = XL.SCANNER.POSITION

module XL.ERRORS is
// ----------------------------------------------------------------------------
//    Elementary module for error handling
// ----------------------------------------------------------------------------

    function Localize (E : text) return text is
    // ------------------------------------------------------------------------
    //   Temporary: localization is off at this point
    // ------------------------------------------------------------------------
        return E


    error_out_stack     : string of IO.output_string_stream


    procedure PushErrorContext() is
    // ------------------------------------------------------------------------
    //    Push a new output string stream to store errors
    // ------------------------------------------------------------------------
        error_out_stack += IO.open_string_stream()


    function PopErrorContext() return text is
    // ------------------------------------------------------------------------
    //   Pop last string stream for errors
    // ------------------------------------------------------------------------
        out : IO.output_string_stream := back(error_out_stack)
        pop_back error_out_stack
        return IO.close_string_stream(out)


    procedure Display(E : text) is
    // ------------------------------------------------------------------------
    //   Display an error from an error context
    // ------------------------------------------------------------------------
        old_stdout : IO.output_file := IO.standard_output
        if size (error_out_stack) > 0 then
            IO.standard_output := back(error_out_stack)
        else
            // Count all errors, to shame poor user
            error_count += 1
            IO.standard_output := IO.standard_error

        IO.Write E

        IO.standard_output := old_stdout        
        

    procedure ErrorInt (E : text; pos : integer; args : string of text) is
    // ------------------------------------------------------------------------
    //    Report the given error
    // ------------------------------------------------------------------------
        file      : text
        line      : integer
        column    : integer
        linetext  : text
        msg       : text
        fmt       : text
        I         : integer
        Max       : integer
        hadDollar : boolean := false

        // Get message and perform substitution
        msg := Localize E
        Max := length msg
        for I in 0..Max-1 loop
            C : character := msg[I]
            if C = '$' then
                if hadDollar then
                    fmt += "$"
                    hadDollar := false
                else
                    hadDollar := true
            else if hadDollar then
                if C >= '1' and C <= '9' then
                    fmt += args[integer(C) - integer('1')]
                hadDollar := false
            else
                fmt += C

        // Convert positon to line and column
        if pos = -1 then
            IO.WriteLn "[Compiler generated]: ", fmt
        else
            POS.PositionToLine pos, file, line, column, linetext

            // Display message
            if file <> "" then
                IO.WriteLn file, ":", line, ": ", fmt

                // Display line contents and caret
                IO.Writeln "| ", linetext
                IO.Write   "|_"
                while column > 0 loop
                    IO.Write "_"
                    column -= 1
                IO.writeln "^"
            else
                IO.WriteLn "[Unknown position]: ", fmt


    procedure Error (E : text; pos : integer; args : string of text) is
    // ------------------------------------------------------------------------
    //   Report the given error on the current stream
    // ------------------------------------------------------------------------

        old_stdout : IO.output_file := IO.standard_output
        if size (error_out_stack) > 0 then
            IO.standard_output := back(error_out_stack)
        else
            IO.standard_output := IO.standard_error

        ErrorInt E, pos, args

        IO.standard_output := old_stdout        


    procedure Error (E : text; pos : integer) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        Error E, pos, args


    procedure Error (E : text; pos : integer; arg : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        Error E, pos, args


    procedure Error (E : text; pos : integer; arg : text; arg2 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        args += arg2
        Error E, pos, args


    procedure Error (E : text;
                     pos : integer;
                     arg : text; arg2 : text; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        args += arg2
        args += arg3
        Error E, pos, args


    procedure Error (E : text; arg : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        Error E, arg.position, args


    procedure Error (E : text; arg : PT.tree; arg2 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += arg2
        Error E, arg.position, args


    procedure Error (E : text; arg : PT.tree; arg2 : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += text arg2
        Error E, arg.position, args


    procedure Error (E : text; arg : PT.tree; arg2 : text; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += arg2
        args += arg3
        Error E, arg.position, args


    procedure Error (E : text; arg : PT.tree; arg2 : text; arg3 : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += arg2
        args += text arg3
        Error E, arg.position, args


    procedure Error (E : text; arg : PT.tree; arg2 : PT.tree; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += text arg2
        args += arg3
        Error E, arg.position, args


    procedure Error (E : text; arg:PT.tree; arg2:PT.tree; arg3:PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += text arg
        args += text arg2
        args += text arg3
        Error E, arg.position, args

