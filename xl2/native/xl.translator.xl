// ****************************************************************************
//  xl.translator.xl                (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     The basic XL translator
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This program is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import PT = XL.PARSER.TREE
import PR = XL.PARSER
import IO = XL.TEXT_IO
import BC = XL.BYTECODE
import SEM = XL.SEMANTICS
import CG = XL.CODE_GENERATOR
import OPT = XL.OPTIMIZER
import SYM = XL.SEMANTICS.SYMBOLS


module XL.TRANSLATOR is
// ----------------------------------------------------------------------------
//    The high-level XL translator
// ----------------------------------------------------------------------------

    procedure Compile(input : PT.tree) is
    // ------------------------------------------------------------------------
    //   Compile the tree to standard output
    // ------------------------------------------------------------------------
        Compile input, IO.standard_output


    procedure Compile(input : PT.tree; output : text) is
    // ------------------------------------------------------------------------
    //   Compile the tree to a named file
    // ------------------------------------------------------------------------
        file : IO.file := IO.Open(output, IO.write_mode)
        Compile input, file
        IO.Close file


    procedure Compile(input : PT.tree; output : IO.output_file) is
    // ------------------------------------------------------------------------
    //    Compile the tree to a given file
    // ------------------------------------------------------------------------
        SEM.InitSemantics()
        after_semantics     : BC.bytecode := SEM.Semantics(input)
        after_optimizations : BC.bytecode := OPT.Optimize(after_semantics)
        CG.Transcode after_optimizations, output
