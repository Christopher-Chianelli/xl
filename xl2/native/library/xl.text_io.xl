// ****************************************************************************
//  xl.text_io.xl                   (C) 1992-2006 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Implementation of text I/O
//     This is roughly equivalent to the file portion of C stdio.h
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

module XL.TEXT_IO is

    type file is XL.BYTECODE.xlfile

    function File (Name, Mode : text) return file is C.fopen
    function FileClose(F : file) return integer is C.fclose
    procedure Delete (F : file) is
        dummy : integer := FileClose(F)
    to Copy(out Tgt : file;
            in  Src : file) written Tgt := Src is XL.BYTECODE.copy_ptr


    // ========================================================================
    //
    //   Writing to files
    //
    // ========================================================================

    to Write(F : file) is
    // ------------------------------------------------------------------------
    //   Write nothing at all, with style
    // ------------------------------------------------------------------------
        return


    function PutCharInFile(C : integer; F : file) return integer is C.fputc

    to Write(F : file; C : character) is
    // ------------------------------------------------------------------------
    //    Write a single character
    // ------------------------------------------------------------------------
        dummy : integer := PutCharInFile (integer(C), F)


    to Write(F : file; N : integer) is
    // ------------------------------------------------------------------------
    //    Writing an integer
    // ------------------------------------------------------------------------
    // REVISIT: All this should be unsigned, doesn't work with negative
        divisor : integer := 1
        base    : integer := 10
        while base * divisor < N loop
            divisor := divisor * base

        loop
            digit : integer := N / divisor
            dummy : integer := PutCharInFile (digit + integer('0'), F)
            N := N - base * digit
            divisor := divisor / base
        while divisor > 0


    to Write(F : file; N : real) is
    // ------------------------------------------------------------------------
    //   Writing a real number 
    // ------------------------------------------------------------------------
        Write F, "Not yet implemented"


    function PutStringInFile (S : text; F : file) return integer is C.fputs

    to Write(F : file; S : text) is
    // ------------------------------------------------------------------------
    //    Writing a text
    // ------------------------------------------------------------------------
        dummy : integer := PutStringInFile (S, F)


    to Write(F : file; W : writable; ...) is
    // ------------------------------------------------------------------------
    //   Write a writable and something else to a file
    // ------------------------------------------------------------------------
        Write F, W
        Write F, ...


    to WriteLn(F : file; ...) is
    // ------------------------------------------------------------------------
    //   Write elements with CR at end
    // ------------------------------------------------------------------------
        Write F, ...
        Write F, character(10)
