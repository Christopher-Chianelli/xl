// ****************************************************************************
//  xl.math.complex.xl              (C) 1992-2006 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Implementation of a generic complex type
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision: 259 $
// * Date       : $Date: 2006-06-13 08:33:20 +0200 (Tue, 13 Jun 2006) $
// ****************************************************************************

module XL.MATH.COMPLEX is

    function Complex (re,im : complex.value) return complex written re + im i is
        result.re := re
        result.im := im

    function Complex (re : complex.value) return complex written re is
        result.re := re
        // result.im := 0.0

    function Imaginary (im : complex.value) return complex written im i is
        // result.re := 0.0
        result.im := im

    to Copy(out Target : complex; Source : complex) written Target := Source is
        Target.Re := Source.Re
        Target.Im := Source.Im

    function Add (X, Y : complex) return complex written X+Y is
        result.re := X.re + Y.re
        result.im := X.im + Y.im

    function Subtract (X, Y : complex) return complex written X-Y is
        result.re := X.re - Y.re
        result.im := X.im - Y.im

    function Multiply (X, Y : complex) return complex written X*Y is
        result.Re := X.Re * Y.Re - X.Im * Y.Im
        result.Im := X.Re * Y.Im + X.Im * Y.Re

    function Divide (X, Y : complex) return complex written X/Y is
        Denom : var := Y.Re * Y.Re + Y.Im * Y.Im
        result.Re := (X.Re * Y.Re + X.Im * Y.Im) / Denom
        result.Im := (X.Im * Y.Re - X.Re * Y.Im) / Denom

