// ****************************************************************************
//  xl.bytecode                     (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Bytecode format strings
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU Genral Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

init            "#define XLINIT 1"
                "#include ""xl_lib.h"""

                "typedef char Int8;"
                "typedef short Int16;"
                "typedef int Int32;"
                "typedef unsigned char UInt8;"
                "typedef unsigned short UInt16;"
                "typedef unsigned int UInt32;"
                "typedef float Real32;"
                "typedef double Real64;"
                "typedef /*long - causes GCC warning*/ double Real80;"
                "typedef Int32 Int;"
                "typedef UInt32 UInt;"
                "typedef Real64 Real;"
                "typedef char Bool;"
                "typedef wchar_t Char;"
                "typedef ::text Text;"
                "typedef struct {} Rec, Mod;"

term            "/*end*/"

nop             ""
type            "/* Type */"
error           "/* ERROR */"
value           "/* Value: $1 */"

ref_decl        "/* $1 $2; Ref */"
temp_decl       "$1 $2; /* Temp */"
local_decl      "$1 $2; /* Local */"
result_decl     "$1 $2; /* Result */"
parm_decl       "/* $1 $2 */ "
global_decl     "$1 $2;"
field_decl      "$1 $2;"

fn_ret0         "void "
fn_ret1         "$1 "
fn_retN_begin   "struct Ret_$1 {${"
fn_retN_decl    "$1 $2;"
fn_retN_end     "$}};"
fn_retN         "struct Ret_$1 "
fn_name         "$1 "
fn_ptr_name     "(*$1) "
fn_begin_parms  "(${ "
fn_parm         "$[, ]$1 $2 "
fn_end_parms    "$}) "

fn_decl_begin   ""
fn_decl_end     ";"
fn_ptr_begin   "typedef "
fn_ptr_end     ";"

fn_body_begin   ""
fn_body         "{"
fn_body_end     "}"

record_begin    "typedef struct $1 {"
record_field    "  $2 $3;"
record_end      "} $1;"

field           "#define $1 ($2.$3)"

call_begin      ""
call_ret1_decl  "$1 $2; /* Ret */"
call_retN_decl  "struct Ret_$1 $2;"
call_ret1       "$2 = "
call_retN       "$2 = "
call_args_begin "$1 (${ "
call_arg        "$[, ]$2 "
call_args_end   ")$};"
call_outtype    ""
call_outarg1    "$1 = $2;"
call_outargN    "$1 = $2.$3;"
call_end        ""

entry_ret1_decl ""
entry_retN_decl "struct Ret_$1 RetVal_$1;"
entry_retN_loc  "$1 $2;"
exit_label      "exit_$1: 0;"
exit_ret1       "return $1;"
exit_retN_set   "RetVal_$1.$2 = $3;"
exit_retN       "return RetVal_$1;"

goto_exit       "goto exit_$1;"

if              "if($1) goto else_$2;"
ifnot           "if(!($1)) goto else_$2;"
ifelse          "goto endif_$1;"
                "else_$1: 0;"
ifend           "endif_$1: 0;"

// Temporary hack in main for something normally declared in XL.UI.CONSOLE
main_begin      "namespace xl { namespace ui { namespace console {"
                "std::vector< ::text > arguments;"
                "}}}"
                "void XLMain() {"
main_invoke     "   XL_Init();"
                "   XL_Term();"
main_end        "}"
globinit_begin  "void XL_Init() {"
globinit_end    "}"
globinit_none   "#define XL_Init()"
globterm_begin  "void XL_Term() {"
globterm_end    "}"
globterm_none   "#define XL_Term()"

xltest          "xl::textio::writeln($1);"


add_int         "$1 = $2 + $3;"
sub_int         "$1 = $2 - $3;"
mul_int         "$1 = $2 * $3;"
div_int         "$1 = $2 / $3;"
equ_int         "$1 = $2 == $3;"

copy_int        "$1 = $2;"
copy_real       "$1 = $2;"
