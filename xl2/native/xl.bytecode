// ****************************************************************************
//  xl.bytecode                     (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Bytecode format strings
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU Genral Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

xcinit          "#define XLINIT 1"
                "#include ""xl_lib.h"""
xcterm          ""

init            "#include <stdio.h>"

                "typedef char                   xlint8;"
                "typedef short                  xlint16;"
                "typedef int                    xlint32;"
                "typedef long long              xlint64;"
                "typedef unsigned char          xluint8;"
                "typedef unsigned short         xluint16;"
                "typedef unsigned int           xluint32;"
                "typedef unsigned long long     xluint64;"
                "typedef float                  xlreal32;"
                "typedef double                 xlreal64;"
                "typedef int                    xlint;"
                "typedef unsigned               xluint;"
                "typedef double                 xlreal;"
                "typedef char                   xlbool;"
                "typedef char                   xlchar;"
                "typedef const char *           xltext;"
                "typedef void *                 xlptr;"
                "typedef struct {} /* !ANSIC */ xlrecord, xlmodule;"
                "typedef FILE *                 xlfile;"
                "xlfile xl_getstdfile(int n) {"
                "  switch(n) {"
                "    case 0: return stdin;"
                "    case 1: return stdout;"
                "    case 2: return stderr;"
                "  }"
                "  return NULL;"
                "}"
stdfile         "$1 = xl_getstdfile($2);"

term            "/*end*/"

nop             ""
decl            ""
type            "/* Type */"
error           "/* ERROR */"
value           "/* Value: $1 */"
write           "/* Write: $1 */"

ref_decl        "/* $1 $2; Ref */"
temp_decl       "$1 $2; /* Temp */"
local_decl      "$1 $2; /* Local */"
result_decl     "$1 $2; /* Result */"
parm_decl       "/* $1 $2 */ "
global_decl     "$1 $2; /* Global */"
field_decl      "$1 $2; /* Field */"

fn_ret0         "void "
fn_ret1         "$1 "
fn_retN_begin   "struct Ret_$1 {${"
fn_retN_decl    "$1 $2;"
fn_retN_end     "$}};"
fn_retN         "struct Ret_$1 "
fn_name         "$1 "
fn_ptr_name     "(*$1) "
fn_begin_parms  "(${ "
fn_parm         "$[, ]$1 $2 "
fn_end_parms    "$}) "

fn_decl_begin   ""
fn_decl_end     ";"
fn_ptr_begin   "typedef "
fn_ptr_end     ";"

fn_body_begin   ""
fn_body         "{"
fn_body_end     "}"

record_begin    "typedef struct $1 {"
record_field    "  $2 $3;"
record_end      "} $1;"

field           "#define $1 ($2.$3)"

call_begin      ""
call_ret1_decl  "$1 $2; /* Ret */"
call_retN_decl  "struct Ret_$1 $2;"
call_ret1       "$2 = "
call_retN       "$2 = "
call_args_begin "$1 (${ "
call_arg        "$[, ]$2 "
call_args_end   ")$};"
call_outtype    ""
call_outarg1    "$1 = $2;"
call_outargN    "$1 = $2.$3;"
call_end        ""

entry_ret1_decl "$1 $2; /* Out=Ret */"
entry_retN_decl "struct Ret_$1 RetVal_$1;"
entry_retN_loc  "$1 $2;"
exit_label      "exit_$1: 0;"
exit_ret1       "return $1;"
exit_retN_set   "RetVal_$1.$2 = $3;"
exit_retN       "return RetVal_$1;"

goto_exit       "goto exit_$1;"

if              "if($1) goto else_$2;"
ifnot           "if(!($1)) goto else_$2;"
ifskip          "goto endif_$1;"
ifelse          "else_$1: 0;"
ifend           "endif_$1: 0;"

loopentry       "loopentry_$1: 0;"
loopagain       "goto loopentry_$1;"
loopskip        "goto loopend_$1;"
loopend         "loopend_$1: 0;"
loopif          "if ($1) goto loopentry_$2;"
loopifnot       "if (!($1)) goto loopentry_$2;"
loopexit        "loopexit_$1: 0;"
exitloop        "goto loopexit_$1;"

main_begin      "int main(int _argc, char **_argv)"
                "{"
main_invoke     "    /* Main */"
main_end        "    return 0;"
                "}"

xltest          "xl::textio::writeln($1);"


copy_int        "$1 = $2;"
add_int         "$1 = $2 + $3;"
sub_int         "$1 = $2 - $3;"
mul_int         "$1 = $2 * $3;"
div_int         "$1 = $2 / $3;"
equ_int         "$1 = $2 == $3;"
lt_int          "$1 = $2 < $3;"
gt_int          "$1 = $2 > $3;"
le_int          "$1 = $2 <= $3;"
ge_int          "$1 = $2 >= $3;"
neg_int         "$1 = -$2;"

copy_real       "$1 = $2;"
add_real         "$1 = $2 + $3;"
sub_real         "$1 = $2 - $3;"
mul_real         "$1 = $2 * $3;"
div_real         "$1 = $2 / $3;"
equ_real         "$1 = $2 == $3;"
lt_real          "$1 = $2 < $3;"
gt_real          "$1 = $2 > $3;"
le_real          "$1 = $2 <= $3;"
ge_real          "$1 = $2 >= $3;"
neg_real         "$1 = -$2;"

copy_bool        "$1 = $2;"
not_bool         "$1 = !$2;"
and_bool         "$1 = $2 && $3;"
or_bool          "$1 = $2 && $3;"
xor_bool         "$1 = !$2 != !$3;"

int_to_char      "$1 = (xlchar) $2;"
char_to_int      "$1 = (xlint) $2;"

get_stdin        "$1 = stdin;"
get_stdout       "$1 = stdout;"
get_stderr       "$1 = stderr;"

