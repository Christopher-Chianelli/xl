// ****************************************************************************
//  xl.semantics.pragmas.xl         (C) 1992-2004 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Handles the pragma notation: {pragma}
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import PT = XL.PARSER.TREE
import XLT = XL.TRANSLATOR
import SYM = XL.SYMBOLS


module XL.SEMANTICS.PRAGMAS is


    function PragmaName (pragma : PT.tree) return PT.name_tree is
    // ------------------------------------------------------------------------
    //    Return the name of a pragma
    // ------------------------------------------------------------------------
        if pragma.kind = PT.xlNAME then
            name : pragma as PT.name_tree
            return name
        else if pragma.kind = PT.xlINFIX then
            infix : pragma as PT.infix_tree
            return PragmaName(infix.left)
        else if pragma.kind = PT.xlPREFIX then
            prefix : pragma as PT.prefix_tree
            return PragmaName(prefix.left)
        else
            ERR.Error "Invalid syntax for pragma", pragma
            return PT.NewName("error")


    function ProcessPragma(phase : text;
                           pragma : PT.tree;
                           input : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //    Process an individual pragma
    // ------------------------------------------------------------------------
        SYM.SetText XLT.context, "PHASE", phase
        SYM.SetProperty XLT.context, "PRAGMA", pragma
        p_name : PT.name_tree := PragmaName(pragma)
        name : text := PT.XLNormalize(p_name.value)
        if SYM.GetInteger(XLT.context, name + ".pragma", 0, true) <> 1 then
            ERR.Error "The pragma {$1} is not implemented", p_name
        result := SYM.LookupRewrite(XLT.context, name, input)
        trace[pragmas] "Pragma ", name, ".", phase, "(", input, ")"
        trace[pragmas] "Pragma result ", name, ".", phase, "=(", result, ")"


    translation XLDeclarations
    // ------------------------------------------------------------------------
    //    Processing pragmas at declaration time
    // ------------------------------------------------------------------------
        when
            { 'Pragma' } 'Node'
        then
            result := ProcessPragma("xldeclarations", Pragma, Node)
            result := XLT.XLDeclarations(result)
        when
            { 'Pragma' }
            'Node'
        then
            result := ProcessPragma("xldeclarations", Pragma, Node)
            result := XLT.XLDeclarations(result)


    translation XLSemantics
    // ------------------------------------------------------------------------
    //    Processing pragmas at semantics time
    // ------------------------------------------------------------------------
        when
            { 'Pragma' } 'Node'
        then
            result := ProcessPragma("xlsemantics", Pragma, Node)
            result := XLT.XLSemantics(result)
        when
            { 'Pragma' }
            'Node'
        then
            result := ProcessPragma("xlsemantics", Pragma, Node)
            result := XLT.XLSemantics(result)


    translation XLOptimizations
    // ------------------------------------------------------------------------
    //    Processing pragmas at declaration time
    // ------------------------------------------------------------------------
        when
            { 'Pragma' } 'Node'
        then
            result := ProcessPragma("xloptimizations", Pragma, Node)
            result := XLT.XLOptimizations(result)
        when
            { 'Pragma' }
            'Node'
        then
            result := ProcessPragma("xloptimizations", Pragma, Node)
            result := XLT.XLOptimizations(result)
