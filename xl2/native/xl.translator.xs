// ****************************************************************************
//  xl.translator.xs                (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     The basic XL translator
// 
//     NOTE: 'translation' statements introduce new entries into that
//     namespace. For instance a 'translation Semantics' will add a
//     'Semantics' function into that namespace for Semantcs rewrites
//
// 
// 
// 
// 
// ****************************************************************************
// This program is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import PT = XL.PARSER.TREE
import IO = XL.TEXT_IO
import SYM = XL.SYMBOLS
import BC = XL.BYTECODE


module XL.TRANSLATOR with

    procedure Compile(input : PT.tree)
    procedure Compile(input : PT.tree; output : text)
    procedure Compile(input : PT.tree; output : IO.output_file)

    verbose           : boolean := false
    run_semantics     : boolean := true
    show_semantics    : boolean := false

    context           : SYM.symbol_table := nil
    global_context    : SYM.symbol_table := nil
    main_context      : SYM.symbol_table := nil

    nop               : BC.bytecode

    procedure InitializeTranslator

    // Invokation of Semantics on scopes
    // In XL, all symbols in a scope are visible within that scope
    // This function deals with the two-pass declaration process
    function ScopeSemantics (input: PT.tree; global: boolean) return BC.bytecode

    // The following functions populate the local context
    procedure AddScopeDecl(table: SYM.symbol_table; decl : PT.tree)
    procedure AddScopeInit(table: SYM.symbol_table; init : PT.tree)
    procedure AddScopeTerm(table: SYM.symbol_table; term : PT.tree)
    procedure AddGlobalDecl(term : PT.tree)
    procedure AddGlobalInit(term : PT.tree)
    procedure AddGlobalTerm(term : PT.tree)


    // The following functions are automatically generated

    // PluginsInit contains code initializing translation entries in
    // the symbols table
    // Semantics and Optimization contain the code generated by
    // 'translation Semantics' and 'translation Optimization' respectively
    procedure PluginsInit                                      // Generated
    function EvaluateType(input: PT.tree) return BC.bytecode   // Generated
    function Declarations(input: PT.tree) return BC.bytecode   // Generated
    function Semantics(input: PT.tree) return BC.bytecode      // Generated
    function Optimization(input: PT.tree) return BC.bytecode   // Generated
