// ****************************************************************************
//  xl.constants.xl                 (C) 1992-2004 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Implementation of XL constant evaluation
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision$
// * Date       : $Date$
// ****************************************************************************

import XLT = XL.TRANSLATOR
import SYM = XL.SYMBOLS


module XL.CONSTANTS is
// ----------------------------------------------------------------------------
//    Implements basic evaluation of constants
// ----------------------------------------------------------------------------

    function EvaluateConstant(input : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //   Evaluate a constant and return it, or return nil
    // ------------------------------------------------------------------------

        // Evaluate leaf values
        if input.kind = PT.xlINTEGER then
            return input
        else if input.kind = PT.xlREAL then
            return input
        else if input.kind = PT.xlTEXT then
            return input
        else if input.kind = PT.xlNAME then
            return NamedConstant(PT.name_tree(input))

        // First start by evaluating leafs for non-leaf nodes
        else if input.kind = PT.xlINFIX then
            infix : input as PT.infix_tree
            left : PT.tree := EvaluateConstant(infix.left)
            right : PT.tree := EvaluateConstant(infix.right)
            if left <> nil and right <> nil then
                input := PT.NewInfix(infix.name, left, right, infix.position)

        else if input.kind = PT.xlPREFIX then
            prefix : input as PT.prefix_tree
            left : PT.tree := EvaluateConstant(prefix.left)
            right : PT.tree := EvaluateConstant(prefix.right)
            if left <> nil and right <> nil then
                input := PT.NewPrefix(left, right, prefix.position)

        else if input.kind = PT.xlBLOCK then
            block : input as PT.block_tree
            child : PT.tree := EvaluateConstant(block.child)
            if child <> nil then
                input := PT.NewBlock(child,
                                     block.opening, block.closing,
                                     block.position)

        // Then check if we can evaluate the constants in the result
        result := XLT.XLConstant(input)

        if result <> nil then
            if result.kind = PT.xlBLOCK then
                return nil
            else if result.kind = PT.xlINFIX then
                return nil
            else if result.kind = PT.xlPREFIX then
                return nil


    function NamedConstant(name : PT.name_tree) return PT.tree is
    // ------------------------------------------------------------------------
    //   Check if something is a named constant and if so, return it
    // ------------------------------------------------------------------------
        list : SYM.tree_list
        SYM.Lookup XLT.context, "cst", name.value, list, SYM.lookupAll
        if size(list) = 1 then
            return list[0]
        return nil


    procedure EnterNamedConstant(name : PT.name_tree; value : PT.tree) is
    // ------------------------------------------------------------------------
    //   Enter a named constant in the tree
    // ------------------------------------------------------------------------
        SYM.Enter XLT.context, "cst", name.value, value


    true_tree  : PT.tree := nil
    false_tree : PT.tree := nil

    function AsBoolean(B : boolean) return PT.tree is
    // ------------------------------------------------------------------------
    //    Return a boolean tree
    // ------------------------------------------------------------------------
        if true_tree = nil then
            true_tree := NamedConstant(PT.NewName("true"))
            false_tree := NamedConstant(PT.NewName("false"))

        if B then
            return true_tree
        else
            return false_tree


    translation XLConstant
    // ------------------------------------------------------------------------
    //   Evaluation of constant expressions
    // ------------------------------------------------------------------------

        // Parentheses
        when (('Expression')) then
            return EvaluateConstant(Expression)

        // INTEGERS

        // Arithmetic - Integer
        when ('X' + 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return PT.NewInteger(intX.value + intY.value)

        when ('X' - 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return PT.NewInteger(intX.value - intY.value)

        when ('X' * 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return PT.NewInteger(intX.value * intY.value)

        when ('X' / 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return PT.NewInteger(intX.value / intY.value)

        // Logic - Integer
        when ('X' and 'Y') where (X.kind = PT.xlINTEGER and
                                  Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return PT.NewInteger(intX.value and intY.value)

        when ('X' or 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return PT.NewInteger(intX.value or intY.value)

        when ('X' xor 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return PT.NewInteger(intX.value xor intY.value)

        // Comparisons - Integer
        when ('X' = 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return AsBoolean(intX.value = intY.value)
        when ('X' < 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return AsBoolean(intX.value < intY.value)
        when ('X' > 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return AsBoolean(intX.value > intY.value)
        when ('X' <> 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return AsBoolean(intX.value <> intY.value)
        when ('X' <= 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return AsBoolean(intX.value <= intY.value)
        when ('X' >= 'Y') where (X.kind = PT.xlINTEGER and
                                Y.kind = PT.xlINTEGER) then
            intX : X as PT.integer_tree
            intY : Y as PT.integer_tree
            return AsBoolean(intX.value >= intY.value)


        // REALS

        // Arithmetic - Real
        when ('X' + 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return PT.NewReal(reX.value + reY.value)

        when ('X' - 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return PT.NewReal(reX.value - reY.value)

        when ('X' * 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return PT.NewReal(reX.value * reY.value)

        when ('X' / 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return PT.NewReal(reX.value / reY.value)

        // Comparisons - Real
        when ('X' = 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return AsBoolean(reX.value = reY.value)
        when ('X' < 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return AsBoolean(reX.value < reY.value)
        when ('X' > 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return AsBoolean(reX.value > reY.value)
        when ('X' <> 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return AsBoolean(reX.value <> reY.value)
        when ('X' <= 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return AsBoolean(reX.value <= reY.value)
        when ('X' >= 'Y') where (X.kind = PT.xlREAL and
                                Y.kind = PT.xlREAL) then
            reX : X as PT.real_tree
            reY : Y as PT.real_tree
            return AsBoolean(reX.value >= reY.value)


    translation XLConstantFold
    // ------------------------------------------------------------------------
    //   Perform XL constant evaluation for inner nodes
    // ------------------------------------------------------------------------

        when
            'T'
        then
            result := EvaluateConstant(T)
            if result = nil then
                return XLT.Recurse(T, XLConstantFold)
