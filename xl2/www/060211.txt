<!--Preprocessor-->

After finishing generics, I spent about one day implementing a
preprocessor. Of course, this being XL, the preprocessor could not
just be a plain old text-based preprocessor like in C or C++. Instead,
I chose to implement a new tree-rewrite phase in the compiler, called
XLMacros.

This makes it possible to write pretty interesting
preprocessor macros. For example, the preprocessor can
{cvs "TESTS/11.Preprocessor/constant_evaluation.xl" "compute factorials"},
{cvs "TESTS/11.Preprocessor/macros.xl" "simplify expressions"},
{cvs "TESTS/11.Preprocessor/assert_macro_compile_time_failure.xl" "implement an assert macro that detects at compile time if the condition is statically true or false"}, or
{cvs "TESTS/11.Preprocessor/setting_constants.xl" "create a macro to initialize variables with incremented values"}. All these are not possible with a C-style preprocessor.

The preprocessor has a relatively small number of constructs:

<ul>
<li>{tt "xl.set X=Y"} sets the named constant X to value Y
<li>{tt "xl.value(Expression)"} evaluates the constants in the given expression. Named constants defined by {tt "xl.set"} are evaluated as well.
<li>{tt "xl.text(X)"} returns a text representation of X.
<li>{tt "xl.replace (Source) with (Target)"} performs tree replacements of source trees that look like {tt "Source"} with a tree that looks like {tt "Target"}. For example, {tt "xl.replace('X'+'X') with ('X'*2)"} will replace {tt "(A+A)+(A+A)"} with {tt "(A*2)*2"}
<li>{tt "xl.file(X)"} returns the source file for X, {tt "xl.line(X)"} the line number, {tt "xl.column(X)"} the column, {tt "xl.source_text(X)"} the text for the source line
<li>{tt "xl.include \"filename\""} includes a given file.
<li>{tt "xl.error (msg)"} makes the compiler display an error message.
</ul>

Here is the code of the {tt "assert"} macro in XL. Unlike the C {tt "assert"}, the XL variant generates an error <em>at compile time</em> if the condition is statically false, and no code at all if the condition is statically true.

{pre}
// Evaluate the expression, expand the condition as text
xl.replace (my_assert('cond')) with
    my_assert_implementation(xl.value('cond'), xl.text('cond'), 'cond')
// Check the constant cases for static asserts
xl.replace (my_assert_implementation(true, 'message', 'source')) with (@nop)
xl.replace (my_assert_implementation(false, 'message', 'source')) with
    xl.error ("Assertion '$1' is false at compile time", 'source')
// Otherwise, expand to a runtime test
xl.replace (my_assert_implementation('cond', 'msg', 'src')) with
    if not ('cond') then
        my_assertion_failure ('msg', xl.file('src'), xl.line('src'))
{erp}

