<!--Concept Representations-->

Programmers do not manipulate any {@concept} directly. They deal with
concept <em>representations</em>. There is an unlimited number of
ways to represent a same concept into code, and these representations
have different benefits and drawbacks for the programmers. {@cp}
proposes a set of {concept "metrics"} to evaluate how appropriate a
particular representation is.

Consider the concept of addition as an example. Across different
languages, not only can the addition of A and B can be written in a
variety of ways (different {concept "syntax"}), but it can also behave very
differently (different {concept "semantics"}).

<TABLE CELLPADDING=5>
<TR>
<TD>{wiki "Assembly_language" "Assembly language"}</TD>
<TD>ADD A, B</TD>
<TD>A mnemonic for a processor operation</TD>
</TR>
<TR>
<TD>{@C}</TD>
<TD>A+B</TD>
<TD>A built-in operator on built-in types, normally implemented using
one of the processor operations</TD>
</TR>
<TR>
<TD>{@Java}</TD>
<TD>A+B</TD>
<TD>A built-in operator on built-in types, with identical results
irrespective of the processor operation</TD>
</TR>
<TR>
<TD>{@C}, {@Java}</TD>
<TD>Add(A, B)</TD>
<TD>For user-defined types, many languages require a function
call</TD>
</TR>
<TR>
<TD>{@C++}</TD>
<TD>A+B<BR>A.operator+(B)</TD>
<TD>C++ operators are similar to C for built-in types, but can be
extended for user-defined types</TD>
</TR>
<TR>
<TD>{@Smalltalk}</TD>
<TD>A+B</TD>
<TD>Send to object A the message "+" with B as an argument.</TD>
</TR>
<TR>
<TD>{@XL}</TD>
<TD>A+B*C<BR>MulAdd(A,B,C)</TD>
<TD>XL operators are {inside "expred" "reduced"} to function calls
using pattern matching. The standard library includes functions or
types to represent native processor operations or types.</TD>
</TR>
</TABLE>

All these {@syntax} and {@semantics} variants for the addition are
different {@representations} of the same {@concept}. Because they are
different, these representations don't have the same properties for
the programmer. For example, C programmers need to worry about changes
in the number of bits used to compute the addition when the code moves
from platform to platform, while Java or XL programmers don't.

The syntax itself generally matters very little in the long term,
as long as it is not completely <A
href="http://www.tuxedo.org/~esr/intercal/">inane</A> or
ambiguous. But the semantics may have a profound effect on how well
the code represents the concept, or on how easy it is to maintain or
understand. This is true for any concept, from the simplest to the
most complicated.

