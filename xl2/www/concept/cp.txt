<!--Concept Programming-->

Concept programming derives from a very simple idea:
<B>Your code should reflect the concepts in your application</B>.
Programming is defined in this context as
<B>the art of transforming concepts into code</B>. In other words,
programming maps {@concepts} from a particular {@pb}, also
called <em>application domain</em>, onto a particular
{concept "code" "code space"}.

As simple as these fundamental ideas are, they are not that easy to
implement, nor is it easy to fully understand the implications. Most
programming languages today {concept "diverge" "diverge"}
quite significantly from this ideal, in particular because they
are defined in a {concept "language_limits" "constrained"} way.

Concept programming focuses on how programmers transform
{@concepts} into {@representations}. This is a bit different from many
other methodologies, which focus on a particular set of techniques
(such as {@objects}) or best practices, often derived empirically from
experience.

Concept programming offers {concept "process" "processes"} to
facilitate the process of transforming concepts into
representations. It also proposes {concept "metrics"} to evaluate how
well selected transformations map the {@pb} into the {@cs}.

