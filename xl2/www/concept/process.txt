<!--The Concept Programming Development Process-->

The {@cp} development process consists in the following steps

<OL>
<LI>Identify the application domain and the problem to solve. This
  defines the {@pb} for your program or software component.
<LI>Identify in the {@pb} the individual {@concepts}, that is the
  aspects of the {@pb} that actually matter to the program and will
  need to be represented in the {@code}.
<LI>Identify the behavior of individual concepts and relationships
  between concepts.
<LI>For each {@concept}, define a {@code} notation, if possible similar to
  the usual notation for the concept.
<LI>Find a technology that can be used to
  {concept "representation" "represent"} that
  notation. Choose standard technologies whenever that is possible and the
  notation makes sense
  ({example "function"}, {example "written" "operator"}, {example "object"},
  {example "tasking" "tasks"}, {example "generic" "generic entity"}, etc).
<LI>If no standard notation is appropriate, define and implement a specific
  {concept "extension" "language extension"} that
  {concept "represenation" "represents"} the {@concept} well.
<LI>Verify that the selected representations preserves in the {@code}
  the behavior and relationships between concepts identified
  above as much as possible. There will be
  {concept "semnoise" "differences"}, but minimizing them is a worthy
  objective.
</OL>

These steps apply at any level in the design, from the top-level
application design (where concepts model interaction between large components)
down to the bits and bytes constituting each individual component
(where concepts might represent individual machine
instructions).

For instance, they can be illustrated on {@xl} as a whole.

<OL>
<LI>The {@pb} for {@xl} is defined in the {concept "top" "Concepts"}
section of this web site.
<LI>The specific concepts that were isolated to address the problem
  are described in the {inside "top" "Inside XL"} section.
<LI>Relationship between concepts, for instance the relationship
  between {concept "syntax" "successive source code characters"},
  or the {concept "semantics" "scope of variables"}
  (relationship between variables and blocks/procedures/modules), are
  largely imposed by existing practice in the field of programming
  languages.
<LI>Notations for {@xl} were inspired by either
  {example "numbers" "standard notation for non-programmers"},
  {example "function" "existing practice in other languages"} or
  {example "written" "invented from scratch to fill a perceived gap"}.
<LI>The technology for implementing most of these notations in the
  compiler itself is the
  {inside "translation" "core of the compiler"}, though some specific
  "standard" notations are implemented in the {inside "scanner"} in a
  more traditional way.
<LI>The concept of translation as envisioned for {@xl} needed a
  particular construct, the {example "translate" "translation"}
  statements.
<LI>The result {example "top" "looks like"} most other languages,
  even if the underpinning is very different. There are relatively few
  surprises for users of previous languages when learning the {@xl}
  {concept "synnoise" "syntax"} or {concept "semnoise" "semantics"}.
  However, be aware that getting there took a surprisingly
  large number of iterations :-)
</OL>

This process blends well with existing practice. Typically, the {@pb}
would be identified during a requirements phase. The relationship
between concepts and notations can be identified during the
specification of the program or component. The implementation of the
notation happens during early phases of the actual implementation,
and can be refined as this implementation moves forward.

The correct application of this process can be evaluated using
{concept "metrics" "concept-programming metrics"}.
