<!--Syntax-->

The syntax defines the shape of programs, using set of rules governing
the visible aspects of the {@code}. English syntax is what makes "The
eat cat fish" incorrect, because the (visible) order of words is
incorrect (see {concept "semantics"} to contrast that with semantic
errors).

In most development environments, the code space is represented as
text (known as "source code"), and the syntax essentially
defines the format of that text. For instance, in {@C}, an identifier
such as the name of a variable or function must be a sequence of
alpha-numeric or underscore characters beginning with a letter or
underscore. So {tt "Blob"}, {tt "a29_"} or {tt "___000"} are all valid
C identifiers, whereas {tt "short-sighted"} is not. Syntactic rules
are dependent on the programming environment: {tt "short-sighted"}
would be a valid Lisp identifier, whereas {tt "___000"} would not be any
kind of recognized identifier for an {@Ada} compiler.

By extension, we can call "syntax" the visible aspects of
non-textual source code. For instance, when a programmer edits a
window graphically in {wiki "Visual_Basic" "Visual Basic"} or
{wiki "NEXTSTEP" "NeXT/Apple Interface Builder"},
one can think of this as a graphical syntax for GUI elements.

For {@cp}, one objective of a well-designed syntax is to reduce {@synnoise}.
From that point of view, the visual editing of {@GUI} elements is close
to an ideal, because it fairly directly {@represents} the associated 
{@concepts} from the {@pb}. At this point, {@xl} mostly focuses on
text-only source representations, though this is really more a
simplifying assumption than a design limitation. Graphical
representation of some particular {inside "tree" "XL0 trees"} is
desirable in the future.
