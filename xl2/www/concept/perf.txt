<!--XL as a high-performance programming language-->

An interesting effect of {@semnoise} is that it often precludes
useful optimizations, because the compiler has no precise idea of
what is happening.

A classical example of this is the overuse of pointers in {@C} or
{@C++}. Pointers are used in these languages to represent (among others):
<UL>
<LI>Pointers to arbitrary addresses in memory
<LI>Aliases (alternate names) for existing variables
<LI>References to dynamically allocated memory
<LI>Arrays
<LI>Output parameters of functions
<LI>Callback functions
<LI>Abstract types (using pointers to undeclared struct types)
<LI>Objects
</UL>

The compiler has in general very little information to determine what
use is being made of a specific pointer. For safety, it needs to be
very pessimistic and assume the worst. Consider the following simple
piece of code:
{pre}
    int width, height;
    GetWindowExtent (window, &width, &height);
{erp}

By reading the code, we all know that this reads the window size into
{tt "width"} and {tt "height"}. But the compiler has to assume that
{tt "GetWindowExtent"} does something nasty, like saving a copy of
the pointers away in a global variable, just so that another evildoer
function can modify them. Now, let's say that you follow the above
code with a loop, like:

{pre}
    for (x = 0; x &lt; width; x++)
        for (y = 0; y &lt; height; y++)
            color[x][y] = ComputeColor(x, y, width, height);
{erp}

You look at the assembly code, and even at highest optmiization
levels, you see that the compiler insists on loading width and height
from memory, rather than storing them in a register. Why? Simply
because the compiler now assumes that the {tt "ComputeColor"}
function is the evildoer we mentioned above. The address
of {tt "width"} and {tt "height"} has been <em>exposed</em> by the call to
{tt "GetWindowExtent"}, even if that was just a side effect and not the
intent of that call.

Accesses to memory are very slow relative to register accesses in
modern computers. So this is a significant mis-optimization. But it
happens all the time in C.

The root cause of this is the {@semnoise} around pointers. In that
particular case, the actual {@concept} that should be used for
getting {tt "width"} and {tt "height"} is the notion of
{example "inout" "output parameter"}. Many other forms of semantic
noise can contribute to similar lost optimizations. Here are a few
examples, where understanding why they impact performance negatively
is left as an exercise to the reader (following the links should help,
e-mail me if you need more help):

<UL>
<LI>Replacing the {@concept} of <em>line of text</em> with
 {example "writeln" "end of line character"}, as C or C++ do (this is
 a good example of {@ccast}).
<LI>Using lists to implement functions with a
{concept "variadics" "variable number of arguments"}, as {@C#} does
  (another {@ccast}).
<LI>Making {example "complex" "operator overloading"} a class
  feature (as opposed to an expression feature), the way C++
  implements it.
</UL>


By eliminating as much {@semnoise} as possible, {@xl} as a language
allows the compiler to have a very precise understanding of what is
happening. Language {concept "extension" "extensions"} can even be
used to implement domain-specific optimizations.
