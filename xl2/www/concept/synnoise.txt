<!--Syntactic noise-->

Syntactic noise is a difference between the {@syntax} being used in
the {@code} and the {@concept} it {@represents} in the {@pb}. In other
words, it is an indication that the code doesn't look the way a naive
programmer might expect it. It is an important {@metric} for
{@cp}. Since this is a form of noise, it is desirable to reduce it,
but it is in general impossible to completely eliminate it. And also
remember that noise is somewhat subjective, so what is noise to one
person may be music to another.

Here are a few examples of common syntactic noise:

<UL>

<LI>Statement delimiters such as {tt ";"} in {@C}, {@Pascal} or {@Ada}, or
  parentheses in {@Lisp}, do not represent anything in the {@pb}. They
  address a concern in the {@pb} of compiler writers at the time the
  languages were designed ("how do you parse the input text and sync
  on errors?") rather than a concern for the <em>users</em> of those
  languages. {@xl} attempts to eliminate as much of these extra
  characters as possible.

<LI>Having to use a text-based {@syntax} is often a source of noise
  for a number of entities. Development tools like
  {wiki "NEXTSTEP" "NeXT/Apple's Interface Builder"} or
  {wiki "Visual_Basic" "Visual Basic"} offer
  non-textual (graphical) descriptions of many GUI elements, which
  reduce syntactic noise.

<LI>Terseness in itself is good (that's why we normally write
 {tt "1+2"} in programs rather than {tt "add 1 and 2"}), but it
 really works well only for widely accepted notations. The {@APL}
 language, for instance, was known to be very difficult to decipher
 because of its over-use of strange operators.

<LI>In {@C++}, so-called <EM>angle brackets</EM> are used to delimit
  template parameters and arguments, as in {tt "vector&lt;int&gt;"}.
  This is a productive source of syntactic noise. It causes simple
  syntactic ambiguities because {tt "&gt;&gt;"} is also a C++
  operator, so the text {tt "vector&lt;vector&lt;int&gt;&gt;"}
  doesn't parse right. You need to insert a space, as in
  {tt "vector&lt;vector&lt;int&gt;&nbsp;&gt;"}. There are ambiguities
  when invoking templates too, as in {tt "f&lt;g&&h&gt;(i)"}, which
  can be either a set of two comparisons if {tt"f"} is, say, an
  integer variable, or an explicit template instantiation with
  {tt "g&&h"} as a template argument and {tt "i"} as a run-time
  argument if {tt "f"} is a template name.

</UL>

See the
{concept "diverge" "concept programming analysis of existing languages"})
for examples combining {@semnoise} and {@symnoise}.

Syntactic noise complicates maintenance of programs, and makes the
learning curve steeper. However, it is important to note that
complicated syntactic rules may make it easier for compilers to
detect and report errors.
