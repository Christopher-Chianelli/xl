<!--Generics validation-->

Frequently, when you declare a {@generic} type, you also declare a
number of related generic declarations (other types, algorithms,
etc). Before the {@stl}, we had little experience with large bodies
of generic code.

The STL has popularized a number of {@concepts}, such
as {tt "ForwardIterator"}, which is used for any data type where both
a dereference operator ({tt "operator*"} and an increment operator
({tt "operator++"}) exist. Unfortunately, these concepts translate in
the code with little more than naming conventions on template
parameters. The compiler cannot check anything before actually
instantiating a type. In other words, anybody in the {@C++} community
knows what a {tt "ForwardIterator"} is, except the compiler! In other
words, the {@bandwidth} of the C++ template mechanism is insufficient
to represent a concept such as {tt "ForwardIterator"}.

XL allows to declare
{mcvs "instantiation/generic_validation.xl" "validations for generics"}.
Before even attempting to instantiate a template, the compiler
attempts to instantiate the validation. If the validation is
rejected, then the instantiation itself is rejected. There is even
the possibility to select among candidates based on validation, as
{mcvs "instantiation/validated_selection.xl" "shown in this example"},
but I'm not really sure that this is a good idea...

Note: At this stage, only the C++ version of the compiler implements
generics.

