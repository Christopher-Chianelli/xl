<!--Constructors and destructors-->

Implemented constructors, and improved scoping for destructors.

There is still one missing case, destruction of return temporaries.

Unlike C++, argument passing does not involve construction or
destruction. In other words, the parameter is not considered a
different object than the passed value. This choice was made so that
the constructor and destructor calls would not depend on argument
passing choice made by the compiler.

Specifically:

<UL>
<LI>An input or input/output argument is neither constructed nor
destroyed. Instead, it is considered as the same object as the caller,
even if the compiler decides to copy. Note that you can't modify an
input argument.

<LI>An output argument is destroyed before the call, and a new one
constructed by the callee. It is then destroyed by the caller. The
destroy-before-call part is not done yet.

<LI>A return value is constructed in the callee, and destroyed in the
caller. The destruction of temporaries for return values is not done
yet.
</UL>
