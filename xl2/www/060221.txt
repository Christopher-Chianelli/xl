<!--'Any' lookup-->

Today, I implemented what I call 'any lookup', which is the
following. In C++, when you instantiate a template, you see both the
context where the template is declared, and the context where the
template is instantiated.

In my early experiments with XL, I used a similar scheme, but it soon
proved annoying. Here is an example. Let's say that you have a module
implementing file I/O, with functions such as {tt "Write"}. Using that
module, you create another module that implements, say, standard
input, output and error streams. In that second module, you may want
to refer to the I/O module as {tt "IO"}, with an {tt "import"} statement
like: {tt "import IO=XL.FILE_IO"}. Your {tt "Write"} function in the second
module might be something like:

{pre}
to Write(...) is
    IO.Write StandardOutput, ...
{erp}

This code uses variable argument lists, so it is generic. Now, let's
say that you instantiate {tt "Write"} somewhere else. In that other
context, you may have called something else {tt "IO"}. And the code above
breaks. That's really bad.

Now, it is desirable to be able to lookup in the instantiation
context, but not always. With XL, I finally decided that this would be
an explicit decision on the part of the writer of generic code to say
where lookup in instantiation context is desirable. Here is how you
would write the file I/O version of {tt "Write"}:

{pre}
to Write(F : file; W : writable; ...) is
    any.Write F, W
    Write F, ...
{erp}

What this means is that the first call to write is looked up in the
instantiation context, to find which {tt "Write"} to use to write a
specific {tt "writable"} entity. The second call, on the other hand, is
resolved only locally.

