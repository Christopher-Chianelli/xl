<!--The "Maximum" concept-->

A function that computes the maximum of two integers can be written as:

{pre}function Max(X, Y : integer) return integer is
    if X &lt; Y then
        return Y
    else
       return X
{erp}

This same logic applies to other numeric types as well, so we might
be tempted to use the {tt "number"} generic type we used in the
{example "factorial"} example. However, we can compare things that
are not numbers (for instance text, sorted lexically). All we need is
a &lt; operator. Defining a
{concept "generic-validation" "validated generic type"} allows us to
check for the operator before any instantiation. We can name that
generic type {tt "ordered"}:

{pre}generic type ordered if
    X, Y : ordered
    Test : boolean := X &lt; Y

function Max(X, Y : ordered) return ordered is
    if X &lt; Y then
        return Y
    else
        return X
{erp}

In many cases, it is useful to compare more than two values. Assuming
an order where the maximum can be computed by comparing values two at
a time (there are order relations where this wouldn't work, for
instance "is a descendant of"), we can extend the {tt "Max"} function
to take an {concept "variadics" "arbitrary number of arguments"}:

{pre}function Max(X : ordered) return ordered is
    return X
function Max(X : ordered; other) return ordered is
    result := Max(other)
    if result &lt; X then
        result := X
{erp}

The definition above can be used to compare arbitrary sets of values:

{pre}X : real := Max(1.5, 2.6, -3.9)
Y : integer := Max(1,3,5,6,7,9)
Z : text := Max("Hello", "World")
{erp}

It is possible to add other partial definitions of {tt "Max"} so that
elements of the argument list can be containers themselves. For
instance:

{pre}function Max(C : container of ordered; other) return ordered is
    result := Max(other)
    X : ordered
    for X in C loop
        result := Max(X, result)
{erp}

With such an additional definition, it becomes possible to write:

{pre}X, Y, Z : real
A, B : array[1..7] of real
TheMax : real := Max(X, A, Y, B, Z)
{erp}

An interesting exercise left for the reader is to compare the
{@code} {@representation} above to representations of the same
{@concept}  in other languages, in particular using
{@cp} {@metrics}.


Note: At this point, generic validation is not implemented in the XL
version of the XL compiler, though it works in some cases
{mcvs "instantiation/generic_validation.xl" "in the C++ version"}
