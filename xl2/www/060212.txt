<!--Generics are working-->

The essential aspects of XL generics are working (type instantiation,
implicit function instantiation).  Examples of generic code are found
in the {cvs "TESTS/10.Generics" "test area of CVS"}.

Generics are similar to C++ templates. They are used to create code
that applies to a large number of type. For instance, a data type
representing a pair of items, regardless of the type of the items, can
be represented as follows:

{pre}
generic [type item] type pair is record with
    first  : item
    second : item
{erp}

It is then possible to <em>instantiate</em> the generic type. For
example, a reference to {tt "pair[integer]"} is a record with two
{tt "integer"} elements.

Similarly, it is possible to create a generic subroutine, for example
a procedure that swaps two arguments:
{pre}
generic[type item]
procedure Swap (in out X, Y : item) is
    Temp : item := X
    X := Y
    Y := Temp
{erp}

XL differs from C++ in a number of ways, which are illustrated with
the {cvs "TESTS/10.Generics/minimax_vararg_generic.xl" "following test code"}:

{pre}
generic type ordered where
    A, B : ordered
    Test : boolean := A < B
function Max (X : ordered) return ordered is
    return X
function Max (X : ordered; ...) return ordered is
    result := Max(...)
    if result < X then
        result := X
{erp}

The first important feature is <em>automatic generics</em>. In the
code above, {tt "ordered"} used in the declaration of {tt "Max"} makes
{tt "Max"} itself generic. In other words, the first declaration of
{tt "Max"} would need to be written as follows in C++:

{pre}
template &lt;class ordered&gt;
ordered Max(ordered X) {
    return X;
}
{erp}

The first benefit of the automatic generic type {tt "ordered"} is that
you don't have to repeat template parameters all the time. The second benefit, which is actually the most important one, is that an automatic generic type can be given a <em>validation</em>, like {tt "ordered"}.

The validation is a piece of code that needs to compile with the type used as a tentative replacement for the use of the generic to be valid. Here, we say that a type is "ordered" if and only if it is possible to perform a comparison using &lt; between two ordered values, and if the result of &lt; is a {tt "boolean"}.

If you instantiate {tt "Max"} with {cvs "TESTS/10.Generics/validation_failure.ref" "a type that has no less-than operator"}, it will {cvs "TESTS/10.Generics/validation_failure.xl" "fail"}, even if the code for {tt "Max"} alone is not sufficient to see that there is a problem. In C++, the code would compile.

Another feature of XL generics is variadicity, represented with {tt "..."}. The second declaration of {tt "Max"} makes it possible to use {tt "Max"} with any number of arguments. For instance, if you write {tt "Max(1, 2, 3)"}, the compiler first instantiates the second declaration with {tt "..."} replaced with two {tt "integer"} parameters, then again with {tt "..."} replaced with a single integer parameter, and finally instantiates the first declaration with {tt "ordered"} set to {tt "integer"}.


