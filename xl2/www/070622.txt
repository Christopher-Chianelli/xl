<!--Back to work...-->

It had been a long time since I worked on XL, mostly because I had
spent time writing
an <a href="http://physics.dinechin.org/tim.pdf">article about physics</a>.
For those interested, you will find more information about this
"theory of incomplete measurements"
in <a href="http://grenouille-bouillie.blogspot.com">my blog</a>,
or on the <a href="http://physics.dinechin.org">dedicated web site</a>.

After this little distraction, I finally returned to XL, and it was,
as usual, a pleasure to. I finally got the {tt "range"} type to work
with {svnrev 313} (but it took practically all the check-ins since
{svnrev 299} to get there). There is a small example in
{svn "TESTS/12.Library/range.xl" "this short test"}, also shown below:

<pre>
// Test that basic ranges work
MyRange : variable := 1..3
MyOtherRange : variable := 1.5..7.2
</pre>

It sure does not look like much, does it? But to get that to compile
correctly, here is what needs to work:

<ul>
<li>First, the {tt "1..3"} expression is matched against all written forms,
  and found in the implicit module {tt "XL_BUILTINS"} (see
  {svn "xl_builtins.xs"} source code. The best match is:
<pre>
    function Range (First, Last : ordered) return range[ordered] written First..Last is
         result.First := First
         result.Last := Last
</pre>
</li>
<li>Then, generic argument deduction finds that {tt "ordered"} in the
  code above is {tt "integer"} (from {tt "1"} and {tt "3"}), so we instantiate
  {tt "range[integer]"}.</li>
<li>Then, the compiler gives the {tt "variable"} type in the original
  code the type {tt "range[integer]"}, and looks for a way to rewrite
  {tt "MyRange := 1..3"}.</li>
<li>There is no copy that matches, so the implicit record type copy
  applies (copying one field after the other). Making this work for a
  generic type found in a module is what I had the most trouble
  with.</li>
<li>So the compiler instantiates a {tt "Copy"} routine, written {tt "this :=
  that"}, and invokes {tt "Copy"} to copy the {tt "range[integer]"}.</li>
<li>The same thing happens with {tt "range[real]"} at the next line in
  the program for {tt "MyOtherRange"}.
</ul>

One of the side effects of this effort was a new implementation of the
core lookup algorithms in {svnrev 307}, which was necessary mostly for
maintainability. It very slightly degrades performance (44s instead of
41s to run the whole test suite on my laptop), but it makes it much
easier to tweak the lookup order rules if I ever need to, since this
will be done in a single place.

<hr>

Meanwhile, C++0X
<a href="http://herbsutter.spaces.live.com/blog/cns!2D4327CC297151BB!159.entry">continues
to make slow progress</a> towards standardization. Sadly, Daveed Vandevoorde's
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2073.pdf">modules
proposal</a> did not make the cut. That's unfortunate, it looked
rather well designed (to the extent that something like this can be
said of anything related to C++...)
