<!--Case statement-->

Today, I implemented the 'case' instructions. There are two forms. The
first form behaves like "if/elseif/elseif", but makes it clearer
what the cases are.

{pre}case
    X=Y : WriteLn "X=Y"
    X&lt;Y : WriteLn "X&lt;Y"
    X&gt;Y : WriteLn "X&gt;Y"
{erp}

The second is closer to the "switch" statement in C, with an XL twist.

{pre}case I
    1 :   WriteLn "One"
    2..3: WriteLn "Smallish"
    5 :   WriteLn "Five"
    default: WriteLn "I don't know"
{erp}

The XL twist is that the above is transformed into a call to a
function named "Index", the call being:

{pre}Index(I, 1, 2..3, 5){erp}

The value returns the index of I in its arguments, in the range
0..N-1. This value is used to index the switch table. Any value
outside of the range corresponds to the "default" case.

Note that 2..3 is the XL notation for the range type, not yet
defined in the library, though I think everything is in place for the
definition.

A simple definition of {tt "Index"} would be:
{pre}function Index(Val : integer; Ref : integer; ...) return integer is
    if Val = Ref then
        return 0
    return 1 + Index(Val, ...)
function Index(Val : integer; Ref : range of integer; ...) return integer is
    if Val >= Ref.Lowest and Val <= Ref.Highest then
        return 0
    return 1 + Index(Val, ...)
function Index(Val : integer) return integer is
    return 1
{erp}

The clear benefit compared to the simpler "switch" statement of C is
that by defining the appropriate "Index" functions (which can also
serve to index an element in a list), it is easy to extend the basic
'case' instruction to any type.
