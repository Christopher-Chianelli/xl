<!--October 2008-->
September | <b>October 2008</b> | November
<p>
<a href="081013.html">Monday, 13 October</a>: Comment to ESR's announcement about "C++ considered harmful" 
<ul>
<li>
This is a comment to the <a href="http://esr.ibiblio.org/?p=532">C++ considered harmful</a>
<li>I agree with Jeff that writing about the problems of C++ will only be effective if you can offer something that is better. Consider <a href="http://esr.ibiblio.org/?p=538">your own critique of the Unix Hater's Handbook</a>
<li>Designing a modern language is a problem I have thought about long and hard for a very long time (I'd say 15 years). The result is <a href="http://xlr.sf.net">the XL programming language</a>
<a href="http://xlr.sourceforge.net/Concept%20Programming%20Presentation.pdf">concept programming</a>
<a href="http://grenouille-bouillie.blogspot.com/2008/09/new-c-standard.html">other ways to achieve the same goals</a>
<li>So how exactly is XL improving relative to C++? First, XL stands for "Extensible Language". The initial intuition is that the problem set is not bounded. So I wanted to create a language that made the code representation of arbitrary concepts possible, not just "functions" or "objects". Actually, it should not just be possible, it should be easy. To illustrate, it should make it just as easy to add symbolic differentiation to the language as it would be to add a class in C++. I wouldn't comment here if I didn't think I have <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/xl.plugin.differentiation.xl?view=markup">achieved that objective</a>
<li><a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/12.Library/demichel.xl?view=markup">new built-in types</a>
<a href="http://en.wikipedia.org/wiki/OpenCL">OpenCL</a>
<li><li><b>Code density</b>: XL tries to eliminate what I call syntactic and semantic noise. I invite you to compare the <a href="http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/include/std/complex?view=markup">C++ implementation of complex arithmetic</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/library/xl.math.complex.xl?view=markup">XL implementation</a>
<li><li><b>High abstraction levels</b>: Thanks to the extensibility mechanisms, XL makes it possible to add your own abstraction levels. Like C++, you can <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/library/xl.pointer.xs?view=markup">create your own pointer types</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/07.Plugins/differentiation.xl?view=markup">much higher level</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/xl.plugin.differentiation.xl?view=markup">this plug-in</a>
<a href="http://ubiety.uwaterloo.ca/~tveldhui/papers/pepm99/">C++ implementation</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/10.Generics/minimax_vararg_generic.xl?view=markup">define Maximum the way it should be</a>
<li><li><b>Preprocessing</b>: The XL pre-processor is powerful enough to <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/11.Preprocessor/constant_evaluation.xl?view=markup">compute factorials</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/11.Preprocessor/assert_macro.xl?view=markup">assert macro</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/11.Preprocessor/assert_macro_compile_time_failure.ref?view=markup">fails at compile time</a>
<li><li><b>Quick build cycles</b>: One reason C++ is bad in that respect is that it still relies on the very ugly include-file based modularity inherited from C, which doesn't scale well for a language that is complicated to analyze. XL has <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/11.Preprocessor/include.xl?view=markup">include files</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/library/xl.text_io.xs?view=markup">standard modules</a>
<a href="http://www.eclipse.org/aspectj/">aspects</a>
<li><li><b>Interaction with other languages such as C</b>: XL is designed to interface with a number of incompatible runtimes. So the notion of "runtime" was <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/library/runtime">built into the language</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/library/runtime/C">C</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/library/runtime/Java">Java</a>
<li><li><b>Simple syntax</b>: The syntax of XL consists in a very small number of rules. The whole parser is implemented in <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/xl.parser.xl?view=markup">611 lines of XL</a>
<a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/xl.scanner.xl?view=markup">another 469 lines</a>
</ul>
Tuesday, 14 October: C++ Considered Harmful
<ul>
<li>
There is a <a href="http://esr.ibiblio.org/?p=532">blog entry</a>
<li><a href="http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/include/std/complex?view=markup">the C++ implementation of the same</a>
</ul>

<p>
September | <b>October 2008</b> | November
