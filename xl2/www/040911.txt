<!--Compiling a factorial-->

The XL compiler now correctly compiles the following code with
XL-based semantics and code generation:

{pre}function Factorial (N : integer) return integer written N! is
    if N = 0 then
        return 1
    else
        return N * (N-1)!
{erp}

Actually, I still need a little prefix to make it work to declare the
operators I use:

{pre}function Equal(X : integer; Y : integer) return boolean written X = Y is XL.bytecode.equ_int
function Sub(X : integer; Y : integer) return integer written X - Y is XL.bytecode.sub_int
function Mul(X : integer; Y : integer) return integer written X * Y is XL.bytecode.mul_int
to Copy(out Target : integer; in Source : integer) written Target := Source is XL.bytecode.copy_int
{erp}

The compiler now knows how to pass arguments to functions (including
for output parameters).

Slow, but steady progress.
