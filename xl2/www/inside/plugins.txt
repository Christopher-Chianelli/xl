<!--XL compiler plug-ins-->

To create a language that is truly {concept "extension" "extensible"},
it is necessary to make it possible for third parties to add their
own components to the {inside "translation"} process. For this
reason, the {@xl} compiler is designed so that external
<em>plug-ins</em> can be added to the compiler.

At this stage, {@xl} plug-ins still need to be built with the
compiler. In the long term, the intent is to be able to load plug-ins
at run-time, including based on command-line options or configuration
files. This should be made easier with support for language
{concept "script" "interpretation"} (as opposed to compilation only).

Plug-ins are implemented using the regular {inside "translation"}
process of XL. This process gives the necessary modularity, enabling
a specific component to add individual translations that are
recognized by the whole compiler. The translation implementation
uses tables that are constructed at run-time. So reconfiguring the
compiler at run-time to add or remove individual translations is
possible, regardless of whether plug-ins are compiled-in or
dynamically loaded.
