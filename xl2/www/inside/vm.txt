<!--XL Virtual Machine-->

In order to enable uses of {@xl} in interpreted environments (for
instance as a {concept "script"} language), it would be useful to
design or reuse a virtual machine. This is under investigation.

The two possible approaches are:
<UL>
<LI>Using an existing virtual machine (Java or C# are the obvious
  candidates). The drawback is that there are limitations in these
  VMs that might make it difficult to {@represent} specific
  {@semantics} of XL (for instance, 
  {inside "object_model" "multiple inheritance"} or an advanced
  {example "tasking" "tasking model"}). It is possible to perform
  machine-level {@ccast}, at the expense of performance and with a
  risk to generate unwanted side effects.

<LI>Design an XL-specific virtual machine (tentatively named
  XLR). This is currently the favored approach, though it requires
  more work. The virtual machine
  would take some inspiration from the MSIL in CLR, from the Smalltalk
  virtual machine and from the
  <A href="http://tao-group.com/">Taos</A> virtual assembly
  language. One major benefit of this approach is that the input of
  the VM could be written in {inside "xl012" "XL0"}.

</UL>

The bytecode should also enable the generation of native code easily,
much like MSIL for Microsoft .NET. Currently, the XL compiler
generates C++, with the intent to generate other forms of text (in
particular assembly language) in the future. But even for native code
generation, a proper bytecode definition would be useful.

Another consideration for the longer term is that XL is also intended
to be a {concept "data"} language. It would be desirable for the XL
{concept "translation"} process to be applicable to data as well.
This should be taken into account in the design of the bytecode.
