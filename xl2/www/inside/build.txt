<!--Build instructions-->

You can build XL using the following steps:

<OL>

<LI>Set environment variables for CVS to point to the {tt "xlr"} project:

{pre}export CVS_RSH=ssh
export CVSROOT=:ext:your-login@cvs.sourceforge.net:/cvsroot/xlr
{erp}

You can use an existing SourceForge login, or use anonymous
login. See the CVS instructions on SourceForge.

<LI>Checkout the code:

{pre}TinToy:/tmp> cvs checkout xl2
cvs checkout: Updating xl2
U xl2/.cvsignore
U xl2/.gdb_history
U xl2/COPYING
U xl2/Makefile
...
{erp}

<LI>Select your build environment:

{pre}export BUILDENV=macosx{erp}

Build environments are defined by configuration makefiles, in the form
{tt "Makefile.config.<I>name</I>"}. At this point in time, only
{tt "macosx"} is fully supported, though there are pretty good
  chances that {tt "linux"} will work.

You can copy and modify an existing configuration makefiles to suit
your needs. If you do so, you may add an "autodetect" step in
{tt "Makefile.config."} (notice the trailing dot).

<LI>Change directory to {tt "xl2"} and type {tt "make"}

{pre}TinToy:/tmp> cd xl2
TinToy:/tmp/xl2> make 
----------- Making debug in /tmp/xl2 ------------
Building obj/macosx/debug
Compiling main.cpp
...
{erp}

<LI>The above step will build and test three generations of compiler:

  <UL>
    <LI>A bootstrap compiler written in C++, located under {tt "xl2"}
    <LI>A bootstrap compiler written in XL, located under {tt "xl2/bootstrap"}
    <LI>The current work in progress, located under {tt "xl2/native"}
  </UL>

See the {inside "bootstrap" "dirty bootstrap"} description for more details.

<LI>The build above tests the native compiler from a directory named
(appropriately) {tt "TESTS"}. These tests will most likely fail. At
  this point, this is normal.

<LI>After a whole bootstrap has been done, subsequent build steps can be made
  directly from the {tt "xl2/native"} directory.

</OL>

