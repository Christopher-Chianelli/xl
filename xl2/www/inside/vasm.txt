<!--Virtual Assembler-->

<B>This is simply being defined - No implementation yet</B>

{@XL} defines a virtual assembly language, XLVASM, which is designed
to be independent of the target machine, yet allow simple
interpretation as well as just-in-time compilation to the majority of
target machines.

{section "Data Types"}

XLVASM recognizes 6 basic data types, identified by a letter: B(oolean),
I(nteger), U(nsigned), F(loating-point), P(ointer), and C(ode
pointer). Types are associated to data, the type of instructions is
inferred from the type of their arguments.

The I, U and F types have default sizes, which can be indicated by the
{tt "size"} instruction. For instance, {tt "size&nbsp;u=32"} will set the
default size for unsigned to 32-bit. For the I and U type, any bit
size is valid, and the default if not specified is 32. Computations
will be done as if using exactly the specified number of bits and
using 2's complement. For the F type, valid size are 32, 64, 80 and
128, corresponding to the equivalent IEEE numbers, and the default if
not specified is 64.

The P and C types have a size defined by the target architecture.
These sizes can also be referred to in instructions using the
{tt "bitsize"} operator (see below).

The B type has always a size of 1 bit.

{section "Bitsize and storage size"}

The bitsize for any particular value can be computed using the
{tt "bitsize"} operator. For instance, {tt "bitsize&nbsp;B"} is
1. If {tt "b4"} is a boolean, {tt "bitsize&nbsp;b4"} is also 1.
The storage bit size may be different from the bit size used in
computations. The {tt "stbitsize"} operator computes that storage bit
size, and the {tt "stsize"} operator computes the number of
addressable units required for the value. For instance, on a 32-bit
machine with 8-bit addressable bytes (a common case), for a 27-bit I
value, {tt "bitsize"} will be 27, {tt "stbitsize"} will be 32, and
{tt "stsize"} will be 4, corresponding to the 4 8-bit bytes required
to store 32 bits.


{section "Virtual registers"}

The XLVASM machine model features an unlimited number of virtual
registers (VR), each identified by a number starting at 1. The name
of a virtual register is its type letter followed by its index. For
instance, if VR 3 is an integer, it will be referred to as {tt "i3"}.
If it is a boolean, it will be {tt "b3"}. This type information is
used to infer the type of operations. For instance,
{tt "add&nbsp;i1=i3,i5"} is an integer addition adding virtual registers 3
and 5 and storing the result into virtual register 1, while
{tt "add&nbsp;f1=f3,f5"} is a floating-point addition using the same
virtual registers (1, 3, and 5).

A VR must be introduced by a declaration. VR declarations can be one of:

{instable}
{ins "input"}
Declare an input parameter to a procedure. On entry to the procedure,
the specified VR is initialized with the corresponding input
parameter, following the standard ABI on the target

{ins "output"}
Declare an output parameter to a procedure. On exit of the procedure,
the specified VR is copied into the corresponding output parameter,
following the standard ABI on the target

{ins "local"}
Declare a local virtual register.

{ins "label"}
Declare a VR representing a local label in a procedure.

{endtable}

Virtual registers must be declared in order, starting with 1. They
must all be declared before the first non-declaration instruction in a
procedure. Parameters must be declared before other VRs, in the order
in which they are passed. Other VRs are declared in decreasing order
of usage, which allows a translator to allocate the first ones to
hardware registers.

{pre}// This code declares the virtual registers in a procedure.
proc "Test"
    input       i1              // VR1 is the first parameter, an integer
    input       f2              // VR2 is the second parameter, an FP value
    output      b3              // VR3 is an output or result, a boolean
    local       p4              // VR4 is a local pointer
    local       c5              // VR5 is a local code pointer
{erp}


{section "Virtual Symbols and Constants"}

XLVASM specifies symbols in the source code as text. There is no
restriction on the names that can be encoded in symbols, though
restrictions may exist on the target. For instance, {tt "\"Test\""}
above is such a symbol.

Constant values are specified using the standard XL syntax, and can
be simple arithmetic expression. For instance, {tt "37"} is the
integer constant thirty-seven, which can also be represented as
hexadecimal constant {tt "16#25"} or as computed constant
{tt "32+5"}.


{section "Conditions and Predication"}

The XLVASM follows a predication model similar to the Itanium
processor, where there are explicit boolean registers, and each
instruction can be predicated by one of these boolean
registers. Predication is indicated by prefixing an instruction with
the predicate VR followed by a colon. Tests are explicit, and write a
boolean VR as a result. For instance, the following pseudo-code:

{pre}if VR1 &lt; VR2 then
    VR3 := VR4 + VR5
{erp}

could use the boolean VR6 as a predicate, translating into:

{pre}lt b6 = i1,i2
b6:add i3 = i4,i5
{erp}


{section "SSA form"}

XLVASM source doesn't need to be in single-statement assignment form,
but there is provision to support it. The {tt "phi"} instruction
represents an SSA-phi node, and specifies the target VR. It is
followed by a list of {tt "ssa"} instructions describing the various
VRs that can provide the value of the target VR. Each of these VR must
have been assigned exactly once on an incoming block. {tt "phi"}
instructions must immediately follow a preceding {tt "target"}
instruction. The list is terminated by an {tt "endphi"} instruction.

Example:
{pre}// Collect VR3, VR5 and VR7 into VR9
phi f9
  ssa f3
  ssa f5
  ssa f7
endphi
{erp}

Code in SSA forms cannot directly be executed. It needs to be
flattened first to a non SSA form. In that executable form, basic VR
allocation should have been performed so that the lowest number of
registers is being used.


{section "Encoding"}

XLVASM instructions have a binary encoding, which uses the LE128
encoding. All instructions begin with a LEB128-encoded opcode. If the
instruction writes VRs, they follow the opcode in LEB128 format. If the
instruction reads VRs, they follow the read VRs in LEB128 format.

The low bit of the opcode is reserved to indicate if the instruction
is predicated. If it is set, then the instruction is predicated, and
the boolean VR predicating the instruction immediately follows the
opcode. The low bit is omitted in the opcode numbers indicated
below. If {tt "add.i"} has opcode 2 in the tables below, then the
unconditional form will have a 4 (2 shifted left once, low bit clear)
in the opcode field, and the conditional form will have a 5 in the
opcode field (low bit set).

When an instruction has a size specified, the assembler will prefix
the instruction with an {tt "lsize"} instruction, setting a temporary
size just for this one instruction.

In all instructions, VR0 denotes an implicitly declared code pointer
which is the current instruction pointer. Branch instructions are
typically encoded by writing into VR0:

{instable}
{ins "goto X"}  Encoded as {tt "add.c 0 = 0, (X - current position)"}

{section "Arithmetic instructions"}

{instable}
{ins "add.iupcf"}
Add values. For P and C types, the first input must be a pointer of
the same type, and the second input must be an integer indicating a
valid pointer offset.

{ins "sub.iupcf"}
Subtract values. For I and U types, the two inputs can be integers or
two pointers of the same type. For the P type, the first input must be
a pointer and the second input a integer indicating a valid pointer
offset.

{ins "mul.iuf"}
Multiply values. For the I and U types, the input must either have the
same size as the result, or the sum of their sizes must be the size of
the result.

{ins "div.iuf"}
Divide values. For the I and U types, the result must have the size of
the first operand.

{ins "mod.iuf"}
Modulo (remainder of integer division) - To be specified in more
details.

{ins "shl.iu"}
Shift left. Shifts operand 1 left by the number of positions indicated
in operand 2. The result is 0 if the second operand is higher than the
number of bits.

{ins "shr.iu"}
Shift right. Shifts operand 1 right by the number of positions
indicated in operand 2. The result is zero-extended (for U) or
sign-extended (for I), and consists of identical bits if the second
operand is higher than the size of operand 1.

{ins "and.iub"}
Bitwise 'and' between two sources.

{ins "or.iub"}
Bitwise 'or' between two sources.

{ins "xor.iub"}
Bitwise 'xor' between two sources.

{ins "not.iub"}
Bitwise 'not' of one source.


{endtable}
