<!--Declarative programming-->

There was an
<A href="http://it.slashdot.org/article.pl?sid=04/10/06/1451216">article
   on Slashdot about XAML</A>. Two web sites of interest here:
<A href="http://www.xamlon.com/">the Xamlon web site</A>, and the
mandatory <A href="http://www.myxaml.com/">free software
  alternative</A>.

First of all, to put things a little in perspective, compare the
above web sites with <A href="http://www.laszlosystems.com/">Laszlo's</A>
web site (Laszlo was also featured on Slashdot recently). If you ask
me, Laszlo's web site is a bit more convincing to demonstrate a
potential for a new web experience... But I believe that was not the
point of XAML anyways.

All these XML-based languages share a
common trait (beyond sharing XML as their main support, which I
believe is a bad idea, at least as far as verbosity is concerned).
These languages are mostly declarative in nature. This is a rather
significant shift in programming (though it's not
<A href="http://www.google.com/search?q=declarative+programming&ie=UTF-8&oe=UTF-8">exactly new</A>).

This begs the question: can XL do declarative programming. And the
answer, of course, is YES. Consider for instance the following
<A href="http://www.sellsbrothers.com/spout/#The_Wonder_that_is_XAMLs_Extended_Attribute_Syntax">XML fragment</A>:

{pre}&lt;GridPanel&gt;
  &lt;SimpleText&gt;Testing&lt;/SimpleText&gt;
  &lt;SimpleText&gt;1&lt;/SimpleText&gt;
  &lt;SimpleText&gt;2&lt;/SimpleText&gt;
  &lt;SimpleText&gt;3&lt;/SimpleText&gt;
&lt;/GridPanel&gt;
{erp}

The {concept "xl012" "XL0"} equivalent is something like
{pre}GridPanel
  SimpleText "Testing"
  SimpleText "1"
  SimpleText "2"
  SimpleText "3"
{erp}

In the fist case, you get some ASCII file that is parseable with
easy-to-use APIs. In the second case, you get some ASCII file that is
parseable with easier-to-use APIs. <U>But</U> you also get a
standardized internal representation of that text, that can also be
manipulated with various APIs. And I personally like the terseness of
XL compared to XML.

However, with XL, you also get something which I don't see XML get
anytime soon: the ability to use {concept "xl012" "XL1-level semantics"}
processing on that input, in other word to have a compiler
for an imperative language directly deal with that piece of
declarative code. Why does it matter? Well, in the toy code presented
above, it doesn't. But now consider this new code:

{pre}for Row in MyDatabase loop
    Name   : text := Row.Name
    Street : text := Row.Street
    Zip    : text := Row.ZipCode
    Phone  : text := Row.Phone
    CreateWebForm
        GridPanel
            SimpleText Name
            SimpleText Street
            SimpleText Zip
            SimpleText Phone
{erp}

Now, this same declarative code has been put as is in an imperative
context (in that case, some code looping over a database to get its
contents).
I think it makes sense to be able to take advantage of
all the benefits of the imperative, old-fashioned way, rather than
have to juggle between two languages like XML and Java#. One
language instead of two. The assumption, of course, is that
{tt "CreateWebForm"} is some "special" function form that takes a declarative
argument. We have tons of these "special" quasi-function forms in the
XL compiler already (grep for {tt "translation"} or {tt "initialization"} or
{tt "parse_tree"} in the {cvs "xl.semantics.xl" "source code"} for examples).
