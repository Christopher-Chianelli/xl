<!--The new C++ standard-->

{picr "http://upload.wikimedia.org/wikipedia/commons/d/da/BjarneStroustrup.jpg" "Bjarne Stroustrup, inventor of C++" "150"}

DevX.com has a <a href="http://www.devx.com/SpecialReports/Door/38865">special report</a> on the new C++ standard, currently referred to as <a href="http://en.wikipedia.org/wiki/C%2B%2B0x">C++ 0x</a> because it was due sometime between 2000 and 2009. Well, the standard was quite late compared to early expectations, so an easy joke was that we might end up with {tt "0xA"} or {tt "0xB"}, the C++ hexadecimal notation for 10 or 11. Ultimately, chances are that the standard will make it for 2009, so we will probably refer to it as C++ 09...

This new iteration of the language is of interest to all programmers, because it brings a number of major changes to one of the most popular programming languages today, and one that is already very complex (and therefore hard to extend). But for me in particular, it is all the more interesting to consider how various "innovations" in that new standard compare to features that play the same role in XL.

<h4>Concepts?</h4>

One of the major features in C++ is <em>concepts</em>. DevX has a <a href="http://www.devx.com/SpecialReports/Article/38864">dedicated article</a> about concepts. In short, concepts in C++ are a way to describe categories of templates, and to help the compiler figure out what the programmer intended for a given template. This new aspect of the language makes it easier to define a real contract between the users of a template and its implementers.

<a href="http://xlr.sourceforge.net/Concept%20Programming%20Presentation.pdf">
{picl "http://upload.wikimedia.org/wikipedia/commons/d/d4/Brain_090407.jpg" "Concepts vs. code" "150"}
</a>

C++ concepts, however, are somewhat annoying to me. One reason is that XL has been for a long time based on an approach that I dubbed <a href="http://xlr.sourceforge.net/Concept%20Programming%20Presentation.pdf">concept programming</a>. Concept programming, in the XL sense, is about the relationship between <em>concepts</em> that exist only in our head, and concept <em>representations</em> that exist in the computer. The key idea is to make sure that implementations look and feel like the concepts they represent.

One key consequence of that idea is that a programming language should comfortably support arbitrary concepts, not some finite set (e.g. functions or objects), because the set of concepts we manipulate is not a-priori limited. This is the key reason so much effort was put into making XL extensible.

To summarize, "concepts" in XL are only very remotely related to "concepts" in C++, although, arguably, the XL usage of the word is closer to the standard meaning.

<h4>XL generic validation = C++ concepts</h4>

{picr "http://blogs.voices.com/voxdaily/square-peg-round-hole.jpg" "Does that template or generic apply?" "150"}

Many aspects of XL are a direct consequence of the concept programming design philosophy. For example, XL implemented, since <a href="http://mozart-dev.cvs.sourceforge.net/viewvc/mozart-dev/mozart/lx/TESTS/instantiation/generic_validation.lx?revision=1.1&view=markup">at least 2002</a>, the idea that one can describe how a generic type can be used. This feature is called <em>generic validation</em> in XL terminology. I invite the reader to compare the <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/10.Generics/minimax_vararg_generic.xl?view=markup">XL implementation of a <em>minimum</em> function</a> with the C++-with-concepts <a href="http://www.devx.com/SpecialReports/Article/38864/1763?supportItem=1">implementation of the same</a>. This should convince you that the two ideas are basically almost identical.

So where are the differences between C++ concepts and XL generic validation? One of them is how the contract is being specified. In C++, you specify the kind of operators and functions that define the concept. For example, you would write something like the following to indicate that a {tt "min"} function requires a less-than operator:

{pre}
concept LessThanComparable&lt;typename T&gt; \{
  bool operator&lt;(const T& x, const T& y);
}

template&lt;typename T&gt;
requires LessThanComparable&lt;T&gt;
const T& min(const T& x, const T& y) \{
  return x &lt; y? x : y;
}{erp}

In XL, by contrast, you give an example of code that has to compile with the generic type you want to validate. For example, in XL, you would write something like:

{pre}
generic type ordered where
    A, B : ordered
    Test : boolean := A &lt; B

function Min (X, Y : ordered) return ordered is
    if X &lt; Y then
        return X
    else
        return Y
{erp}

Now, as you can see from this simple example, a significant difference is that XL considers the validation to be tied to a generic type, which can then be used to declare a function like {tt "Min"} directly. In other words, since you declared that {tt "ordered"} is generic, {tt "Min"} becomes implicitly generic. By contrast, in C++, {tt "LessThanComparable"} is a kind of <em>predicate</em> that applies to template classes, so you need one additional "connection" using the {tt "require"} statement, to let the compiler relate the {tt "T"} in the definition of {tt "min"} with the {tt "T"} in {tt "LessThanComparable"}. As a result, the C++ code for that example is more verbose and more convoluted. This becomes more visible as the code becomes more complex.

Another drawback is that the C++ concept specification as written doesn't work for, say, {tt "int"} because the less-than operator in that case doesn't have the right signature. So you need an additional {tt "concept_map"} in that case, making the code even more verbose, as shown below:

{pre}
concept_map LessThanComparable&lt;int&gt; \{ }
{erp}


One benefit of the C++ approach, however, is that the specification of the concept makes it easier to validate early that the implementation actually doesn't require anything besides what is declared in the concept. For example, if the body of {tt "min"} attempts to refer to an operator that is not present in the concept specification, the compiler may detect this. Doing this with the kind of specification given in XL is much more complicated. I am considering various ways to fix this problem, which is much easier in XL since practically nobody uses it yet.

<h4>Multitasking and Threads</h4>

<a href="http://images.businessweek.com/ss/05/12/bestideas/source/14.htm"><img src="http://images.businessweek.com/ss/05/12/bestideas/image/mmedia.jpg" width="150" align="right"/></a>

C++ 0x also adds <a href="http://www.devx.com/SpecialReports/Article/38883">standard support for threads</a>. In my opinion, it is ironic that they manage to shoe-in support for a thread model that is so "last century". Today, the difficult problem is not threading on a SMP system, but threading on non-uniform architectures, for example threading between a CPU and a GPU, or between the components of a <a href="http://en.wikipedia.org/wiki/Cell_(microprocessor)">Cell microprocessor</a>, or threads that cooperate on machines with different architectures across the Internet.

This kind of problem is much more complicated, and is already, to some extent, solved by other languages such as <a href="http://en.wikipedia.org/wiki/Java_(programming_language)#Servlet">Java</a> or <a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)#Concurrency_and_distribution_oriented_language">Erlang</a>.

At this point, XL has little to offer in that space, because what is needed is not coded yet. However, I am confident that XL's extensibility will make it easy to implement not one, but a multitude of tasking models. Among the top candidates are <a href="http://www.seas.gwu.edu/~csci51/fall99/ada_task.html">rendez-vous based mechanisms</a> similar to Ada, message-passing protocols similar to Erlang, or data-driven parallelism similar to several functional languages. Stay tuned.

<h4>Variadic templates</h4>

C++ 0x will, at long last, implement <a href="http://en.wikipedia.org/wiki/C%2B%2B0x#Variadic_templates">variadic templates</a>. This feature will make it possible to write functions that take a variable number of arguments, yet are type-safe.

This is, again, something that existed in XL since <a href="http://mozart-dev.cvs.sourceforge.net/viewvc/*checkout*/mozart-dev/mozart/lx/TESTS/expr_rdn/writeln.lx?revision=1.1">2001</a> or earlier. You can see that XL implementation of the {tt "Max"} function <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/10.Generics/minimax_vararg_generic.xl">takes advantage of this feature</a>.

The C++ implementation is more complete, however, as it makes it possible to create not just variadic functions, but also variadic classes. This is something that is planned, but not currently implemented in XL.

<h4>Range-based iterations</h4>

A new <a href="http://en.wikipedia.org/wiki/C%2B%2B0x#Range-based_for-loop">range-based iteration</a> mechanism was also added to C++ 0x. XL has a more general form of iteration, that already covers this specific case. Here is for example how <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/08.Aggregates/for_loops.xl">for loops</a> are declared in XL:

{pre}
iterator IntegerIterator(var It : integer;
                         Low, High : integer) written It in Low..High is
    It := Low
    while It &lt;= High loop
        yield
        It := It + 1
{erp}

The notation {tt "It in Low..High"} is how you will invoke the iterator, and the {tt "yield"} statement in the iterator is where the body of the loop will go. The usage of the iterator is very natural:

{pre}
for I in 1..5 loop
    for J in 1..I loop
        WriteLn "I=", I, " and J=", J
{erp}

The benefit of this more general approach is that you can for example define two-variable iterators:

{pre}
iterator MatrixIterator (
    var I : integer; LI, HI : integer;
    var J : integer; LJ, HJ : integer) written I,J in [LI..HI, LJ..HJ] is
    I := LI
    while I &lt;= HI loop
        J := LJ
        while J &lt;= HJ loop
            yield
            J := J + 1
        I := I + 1

for A, B in [3..5, 7..9] loop
    WriteLn "A=", A, " and B=", B
{erp}

You can also define iterators over any kind of data structure, using any syntax you need for this particular data structure.

<h4>Constant Expressions</h4>

C++ 0x introduces the notion of <a href="http://en.wikipedia.org/wiki/C%2B%2B0x#Generalized_constant_expressions">generalized constant expression</a>. This makes it possible to declare functions that the compiler will be able to evaluate at compile time.

Once again, the XL approach is very different. The XL compiler has various phases, implemented as "plug-ins" for the compiler. One of them deals with constant folding (i.e. evaluation of constant expressions). Here is an <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/11.Preprocessor/constant_evaluation.xl?view=markup">example</a> showing how to compute factorials at compile-time using that technique.

The XL pre-processor also makes it easy to implement <a href="http://xlr.svn.sourceforge.net/viewvc/xlr/trunk/xl2/native/TESTS/11.Preprocessor/assert_macro_compile_time_failure.xl?view=markup">compile-time assertions</a>, something that is also a <a href="http://en.wikipedia.org/wiki/C%2B%2B0x#Static_assertions">new feature</a> of C++ 0x. The XL implementation, however, will automatically optimize a static assertion if it can evaluate the argument at compile time, instead of requiring a specific keyword.

<h4>Conclusion</h4>

C++ is an extremely complex language, and extending it took a lot of effort. Many of the new features have already existed in XL for a while, and are much easier to implement. However, the implementation in C++ points out some weaknesses in the way things are currently done in XL, something that is fortunately still easy to change that early in the language's life.

Note: This article was originally published
<a href="http://grenouille-bouillie.blogspot.com/2008/09/new-c-standard.html">here</a>.

