<!--Optimization-->

There was a serious performance issue with the XL compiler, related to
temporary error messages.

When doing overloading, for example, if there are 6 candidates, the
compiler will generally fail 5 times out of 6, and emit 5 "temporary"
error messages. There is an error message stack that is designed to
hold these internal error messages until we know if we need them or
not. This mechanism is also used during instantiation, or when we try
to look up for destructors.

The problem with the old implementation of the error stack was that
for each error, we would emit a "real" error message, complete with
line number and line contents. Just as we do for normal messages:

{pre}glop.xl:3: Invalid input character
|       text= ??Hello World??
|_____________^
{erp}

This is, unfortunately, very expensive, because the compiler needs to
scan the source file to figure out what a given position corresponds
to and what the source line is.

The fix for that performance problem is relatively simple: the error
stack now holds the internal position until an error is actually
displayed. Only when we do display the error will the compiler try to
identify and scan the source file to display the line contents.


