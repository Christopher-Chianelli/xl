<!--Decided to upload the site...-->

I took some vacation last week, and that was a good occasion to catch
up a lot on belated {@xl} work. The web site is far from
complete. There are only a few
{example "top" "examples"}, and even less so
{inside "top" "inside information"}. However, the
{concept "top" "conceptual overview"} is beginning to get there.

I decided to upload whatever I have, so that people can get a feel of
where I'm going. Not that I expect anybody to actually be interested
:-)

Recent progress includes:
<UL>

<LI>The plug-in architecture of the compiler. This allowed me to
  implement the first interesting {concept "plugin" "plug-ins"} for
  the compiler,
  {cvs "xl.plugin.differentiation.xl" "symbolic differentiation"} and
  {cvs "xl.plugin.constantfold.xl" "simple constant folding"}.
  They are especially interesting
  when contrasted to their Mozart equivalents
  ({mcvs "derivation.cpp" "differentiation" "plugins"} and
   {mcvs "constantfold.cpp" "constant folding" "plugins"}). Some
  progress was made on the {@semnoise} front...

To test the new plug-ins, use a test file such as:
{pre}import IO = XL.TEXT_IO
procedure Main is
    W, T0, T : real
    Y : real := d(exp(-2*W*(T-T0)) * sin(2*W*(T-T0)))/dT
    IO.WriteLn Y
{erp}
and compile it with the native compiler using:
{pre}% ./nxl -parse test.xl +differentiation +constantfold -show
{erp}

This should get you the following output:
{pre}import IO = XL . TEXT_IO 
procedure Main is 
    W , T0 , T : real 
    Y : real := exp (- (2 * W * (T - T0))) * (2 * W * cos (2 * W * (T - T0))) \
        - 2 * W * exp (- (2 * W * (T - T0))) * sin (2 * W * (T - T0)) 
    IO . WriteLn Y
{erp}

The above command line parses {tt "test.xl"} (without actually compiling
  it), applies the {tt "differentiation"} and {tt "constantfold"}
  plugins, and then shows the output using the default rendering style.

<LI>The {cvs "xl.renderer.xl" "renderer"} is the other big
  addition. It is a style based rendering engine. Default styles
  include {cvs "xl.stylesheet" "default text"} (used above),
  {cvs "debug.stylesheet" "debug (displaying in Polish notation)"} and
  {cvs "html.stylesheet" "colorized HTML"}. The above code rendered
  using colorized HTML looks like this:

<TABLE bgcolor="#E0E0E0">
<TR><TD>

<FONT color="#000080"><B>import</B></FONT>&nbsp;IO&nbsp;=&nbsp;XL&nbsp;.&nbsp;TEXT_IO&nbsp;<BR><FONT color="#000080"><B>procedure</B></FONT>&nbsp;Main&nbsp;is&nbsp;<BR>&nbsp;&nbsp;W&nbsp;,&nbsp;T0&nbsp;,&nbsp;T&nbsp;:&nbsp;<FONT color="#008080"><B>real</B></FONT>&nbsp;<BR>&nbsp;&nbsp;Y&nbsp;:&nbsp;<FONT color="#008080"><B>real</B></FONT>&nbsp;:=&nbsp;<FONT color="#00C080"><B>exp</B></FONT>&nbsp;<FONT COLOR="#707070">(</FONT>-&nbsp;<FONT COLOR="#707070">(</FONT><FONT color="#800000">2</FONT>&nbsp;*&nbsp;W&nbsp;*&nbsp;<FONT COLOR="#707070">(</FONT>T&nbsp;-&nbsp;T0<FONT COLOR="#707070">)</FONT><FONT COLOR="#707070">)</FONT><FONT COLOR="#707070">)</FONT>&nbsp;*&nbsp;<FONT COLOR="#707070">(</FONT><FONT color="#800000">2</FONT>&nbsp;*&nbsp;W&nbsp;*&nbsp;<FONT color="#00C080"><B>cos</B></FONT>&nbsp;<FONT COLOR="#707070">(</FONT><FONT color="#800000">2</FONT>&nbsp;*&nbsp;W&nbsp;*&nbsp;<FONT COLOR="#707070">(</FONT>T&nbsp;-&nbsp;T0<FONT COLOR="#707070">)</FONT><FONT COLOR="#707070">)</FONT><FONT COLOR="#707070">)</FONT>&nbsp;-&nbsp;<FONT color="#800000">2</FONT>&nbsp;*&nbsp;W&nbsp;*&nbsp;<FONT color="#00C080"><B>exp</B></FONT>&nbsp;<FONT COLOR="#707070">(</FONT>-&nbsp;<FONT COLOR="#707070">(</FONT><FONT color="#800000">2</FONT>&nbsp;*&nbsp;W&nbsp;*&nbsp;<FONT COLOR="#707070">(</FONT>T&nbsp;-&nbsp;T0<FONT COLOR="#707070">)</FONT><FONT COLOR="#707070">)</FONT><FONT COLOR="#707070">)</FONT>&nbsp;*&nbsp;<FONT color="#00C080"><B>sin</B></FONT>&nbsp;<FONT COLOR="#707070">(</FONT><FONT color="#800000">2</FONT>&nbsp;*&nbsp;W&nbsp;*&nbsp;<FONT COLOR="#707070">(</FONT>T&nbsp;-&nbsp;T0<FONT COLOR="#707070">)</FONT><FONT COLOR="#707070">)</FONT>&nbsp;<BR>&nbsp;&nbsp;IO&nbsp;.&nbsp;WriteLn&nbsp;Y<BR>
</TD></TR></TABLE>

The purpose of this exercise is to show that {@xl} is not intended to
be a text-only environment in the future. Intentional Programming
anyone?

To get the above output, you need to use the following command:

{pre}% ./nxl -parse test.xl +differentiation +constantfold -style html -show
{erp}
</UL>
