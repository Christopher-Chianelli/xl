// Types must come first for type info to be initialized correctly
NAME(nil);
NAME(empty);
NAME(true);
NAME(false);

TYPE(boolean);
TYPE(integer);
TYPE(real);
TYPE(text);
TYPE(character);
TYPE(tree);
TYPE(source);
TYPE(code);
TYPE(lazy);
TYPE(value);
TYPE(symbol);
TYPE(name);
TYPE(operator);
TYPE(infix);
TYPE(prefix);
TYPE(postfix);
TYPE(block);

// Basic units
INFIX(DefineRewrite, tree, source, "->", source,
      context->stack->Define(&l, &r);
      return self,
      "")
INFIX(SequenceNewLine, tree, source, "\n", source,
      context->stack->Evaluate(&l);
      return context->stack->Evaluate(&r),
      "")
INFIX(SequenceSemicolon, tree, source, ";", source,
      context->stack->Evaluate(&l);
      return context->stack->Evaluate(&r),
      "")
PREFIX(DataDefinition, tree, "data", PARM(d, source),
       context->stack->DefineData(&d);
       return self,
       "")
BLOCK(Parentheses, tree, "(", source, ")",
      return context->stack->EvaluateBlock(&child),
      "")
BLOCK(CurlyBraces, tree, "{", source, "}",
      return context->stack->EvaluateBlock(&child),
      "")
BLOCK(IntentationBlock, tree, Block::indent, source, Block::unindent,
      return context->stack->EvaluateBlock(&child),
      "")
PREFIX(CodeClosure, tree, "<code>", PARM(c, source),
       return context->stack->EvaluateCode(self, &c),
       "")
PREFIX(LazyClosure, tree, "<lazy>", PARM(c, source),
       return context->stack->EvaluateLazy(self, &c),
       "")
PREFIX(EvaluatedClosure, tree, "<value>", PARM(c, source),
       return &c,
       "")
INFIX(Assignment, tree, source, ":=", tree,
      return context->stack->Assign(&l, &r),
      "")
PREFIX(AnyLookup, tree, "any", PARM(t, source),
       return context->stack->Evaluate(&t, Context::ANY_LOOKUP),
       "")
PREFIX(Property, tree, "property", PARM(t, source),
       (void) t;
       return (context->stack->EnterProperty(self)
               ? XL::xl_true
               : XL::xl_false),
       "")
PREFIX(Constraint, tree, "constraint", PARM(t, source),
       (void) t;
       return (context->stack->EnterConstraint(self)
               ? XL::xl_true
               : XL::xl_false),
       "")
PREFIX(Solve, tree, "solve", PARM(n, name) PARM(t, source),
       return Constraint(&t).SolveFor(&n),
       "")

// Integer arithmetic and comparisons
INFIX(SetInt, integer,integer,":=",integer,XL_RINT(l.value = XL_INT(r)), "")
INFIX(AddInt,integer, integer,"+",integer, XL_RINT(XL_INT(l) + XL_INT(r)), "")
INFIX(SubInt,integer, integer,"-",integer, XL_RINT(XL_INT(l) - XL_INT(r)), "")
INFIX(MulInt,integer, integer,"*",integer, XL_RINT(XL_INT(l) * XL_INT(r)), "")
INFIX(DivInt,integer, integer,"/",integer,
      if (XL_INT(r) == 0) { Ooops("Divide by $1", &r); XL_RINT(0LL); }
      XL_RINT(XL_INT(l) / XL_INT(r)), "")
INFIX(RemInt,integer, integer,"rem",integer,
      if (XL_INT(r) == 0) { Ooops("Divide by $1", &r); XL_RINT(0LL); }
      XL_RINT(XL_INT(l) % XL_INT(r)), "")
INFIX(ModInt,integer, integer,"mod",integer,
      if (XL_INT(r) == 0) { Ooops("Divide by $1", &r); XL_RINT(0LL); }
      XL_RINT(xl_mod(l, r)), "")
INFIX(PowerInt, integer, integer, "^", integer, XL_RINT(xl_pow(l,r)), "")

INFIX(LShift, integer, integer,"<<",integer, XL_RINT(XL_INT(l) << XL_INT(r)), "")
INFIX(RShift, integer, integer,">>",integer, XL_RINT(XL_INT(l) >> XL_INT(r)), "")

INFIX(And, integer, integer, "and", integer, XL_RINT(XL_INT(l) & XL_INT(r)), "")
INFIX(Or, integer, integer, "or", integer, XL_RINT(XL_INT(l) | XL_INT(r)), "")
INFIX(Xor, integer, integer, "xor", integer, XL_RINT(XL_INT(l) ^ XL_INT(r)), "")

INFIX(LTInt, boolean, integer, "<", integer, XL_RBOOL(XL_INT(l) < XL_INT(r)), "")
INFIX(GTInt, boolean, integer, ">", integer, XL_RBOOL(XL_INT(l) > XL_INT(r)), "")
INFIX(LEInt, boolean, integer, "<=", integer, XL_RBOOL(XL_INT(l) <= XL_INT(r)), "")
INFIX(GEInt, boolean, integer, ">=", integer, XL_RBOOL(XL_INT(l) >= XL_INT(r)), "")
INFIX(NEInt, boolean, integer, "<>", integer, XL_RBOOL(XL_INT(l) != XL_INT(r)), "")
INFIX(EQInt, boolean, integer, "=", integer, XL_RBOOL(XL_INT(l) == XL_INT(r)), "")

PREFIX(NegateInt, integer, "-", PARM(x, integer), XL_RINT(-x), "")
PREFIX(BitwiseNotInt, integer, "not", PARM(x, integer), XL_RINT(~x), "")

// Percents
POSTFIX(PercentInt, real, PARM(x, integer), "%", XL_RREAL(x / 100.0), "")
POSTFIX(PercentReal, real, PARM(x, real), "%", XL_RREAL(x / 100.0), "")

// Real arithmetic and comparisons
INFIX(SetReal, real, real, ":=",real, XL_RREAL(l.value = XL_REAL(r)), "")
INFIX(AddReal, real, real, "+", real, XL_RREAL(XL_REAL(l) + XL_REAL(r)), "")
INFIX(SubReal, real, real, "-", real, XL_RREAL(XL_REAL(l) - XL_REAL(r)), "")
INFIX(MulReal, real, real, "*", real, XL_RREAL(XL_REAL(l) * XL_REAL(r)), "")
INFIX(DivReal, real, real, "/", real,
      if (XL_INT(r) == 0) { Ooops("Divide by $1", &r); XL_RREAL(0.0); }
      XL_RREAL(XL_REAL(l) / XL_REAL(r)), "")
INFIX(RemReal, real, real, "rem", real,
      if (XL_INT(r) == 0) { Ooops("Divide by $1", &r); XL_RREAL(0.0); }
      XL_RREAL(fmod(XL_REAL(l), XL_REAL(r))), "")
INFIX(ModReal, real, real, "mod", real,
      if (XL_INT(r) == 0) { Ooops("Divide by $1", &r); XL_RREAL(0.0); }
      XL_RREAL(xl_modf(l,r)), "")
INFIX(PowRealInt, real, real, "^", integer, XL_RREAL(xl_powf(l,r)), "")
INFIX(PowReal, real, real, "^", real, XL_RREAL(pow(XL_REAL(l), XL_REAL(r))), "")

INFIX(LTReal, boolean, real, "<", real, XL_RBOOL(XL_REAL(l) < XL_REAL(r)), "")
INFIX(GTReal, boolean, real, ">", real, XL_RBOOL(XL_REAL(l) > XL_REAL(r)), "")
INFIX(LEReal, boolean, real, "<=", real, XL_RBOOL(XL_REAL(l) <= XL_REAL(r)), "")
INFIX(GEReal, boolean, real, ">=", real, XL_RBOOL(XL_REAL(l) >= XL_REAL(r)), "")
INFIX(NEReal, boolean, real, "<>", real, XL_RBOOL(XL_REAL(l) != XL_REAL(r)), "")
INFIX(EQReal, boolean, real, "=", real, XL_RBOOL(XL_REAL(l) == XL_REAL(r)), "")

PREFIX(Negate, real, "-", PARM(r, real), XL_RREAL(-r), "")
PREFIX(Abs, real, "abs", PARM(x, real), XL_RREAL(fabs(x)), "")
PREFIX(Sqrt, real, "sqrt", PARM(x, real), XL_RREAL(sqrt(x)), "")
PREFIX(Sin, real, "sin", PARM(x, real), XL_RREAL(sin(x)), "")
PREFIX(Cos, real, "cos", PARM(x, real), XL_RREAL(cos(x)), "")
PREFIX(Tan, real, "tan", PARM(x, real), XL_RREAL(tan(x)), "")
PREFIX(ArcSin, real, "asin", PARM(x, real), XL_RREAL(asin(x)), "")
PREFIX(ArcCos, real, "acos", PARM(x, real), XL_RREAL(acos(x)), "")
PREFIX(ArcTan, real, "atan", PARM(x, real), XL_RREAL(atan(x)), "")
PREFIX(ArcTan2, real, "atan", PARM(y, real) PARM(x, real), XL_RREAL(atan2(y,x)), "")
PREFIX(Exp, real, "exp", PARM(x, real), XL_RREAL(exp(x)), "")
PREFIX(ExpMinus1, real, "expm1", PARM(x, real), XL_RREAL(expm1(x)), "")
PREFIX(Log, real, "log", PARM(x, real), XL_RREAL(log(x)), "")
PREFIX(Log2, real, "log2", PARM(x, real), XL_RREAL(log2(x)), "")
PREFIX(Log10, real, "log10", PARM(x, real), XL_RREAL(log10(x)), "")
PREFIX(LogPlus1, real, "log1p", PARM(x, real), XL_RREAL(log1p(x)), "")
PREFIX(PiConstant, real, "pi", , XL_RREAL(M_PI), "")

// Boolean operations
INFIX(SetBool, boolean, boolean, ":=",boolean,
      bool val = XL_BOOL(r);
      l.value = val ? "true" : "false";
      XL_RBOOL(val), "")
INFIX(AndBool, boolean, boolean, "and", boolean, XL_RBOOL(XL_BOOL(l) & XL_BOOL(r)), "")
INFIX(OrBool, boolean, boolean, "or", boolean, XL_RBOOL(XL_BOOL(l) | XL_BOOL(r)), "")
INFIX(XorBool, boolean, boolean, "xor", boolean, XL_RBOOL(XL_BOOL(l) ^ XL_BOOL(r)), "")
PREFIX(NotBool, boolean, "not", PARM(x, boolean), XL_RBOOL(!x), "")

INFIX(NEBool, boolean, boolean, "<>", boolean, XL_RBOOL(XL_BOOL(l) != XL_BOOL(r)), "")
INFIX(EQBool, boolean, boolean, "=", boolean, XL_RBOOL(XL_BOOL(l) == XL_BOOL(r)), "")

// Text operations
INFIX(SetText, text, text,":=", text, XL_RTEXT(l.value = XL_TEXT(r)), "")
INFIX(TextConcatenate, text, text, "&", text, XL_RTEXT(XL_TEXT(l) + XL_TEXT(r)), "")
INFIX(LTText, boolean, text, "<", text, XL_RBOOL(XL_TEXT(l) < XL_TEXT(r)), "")
INFIX(GTText, boolean, text, ">", text, XL_RBOOL(XL_TEXT(l) > XL_TEXT(r)), "")
INFIX(LEText, boolean, text, "<=", text, XL_RBOOL(XL_TEXT(l) <= XL_TEXT(r)), "")
INFIX(GEText, boolean, text, ">=", text, XL_RBOOL(XL_TEXT(l) >= XL_TEXT(r)), "")
INFIX(NEText, boolean, text, "<>", text, XL_RBOOL(XL_TEXT(l) != XL_TEXT(r)), "")
INFIX(EQText, boolean, text, "=", text, XL_RBOOL(XL_TEXT(l) == XL_TEXT(r)), "")

// Some other text primitives
PREFIX(TextLength, integer, "text_length", PARM(t,text),
       XL_RINT(t.value.length()), "")
PREFIX(TextRange, text, "text_range",
       PARM(txt, text) PARM(pos, integer) PARM(sz, integer),
       text t = txt; size_t p = pos; size_t s = sz;
       XL_RTEXT(t.substr(p, s)),
       "")
PREFIX(TextFind, integer, "text_find",
       PARM(txt, text) PARM(fnd, text),
       text t = txt; text f = fnd;
       XL_RINT(t.find(f)),
       "")

// Conversions
PREFIX(IntToReal,  real, "real", PARM(x, integer), XL_RREAL((real_t) x), "")
PREFIX(TextToReal, real, "real", PARM(x, text), XL_RREAL(xl_text2real(x)), "")
PREFIX(RealToInt, integer, "integer", PARM(x, real), XL_RINT((integer_t) x), "")
PREFIX(TextToInt, integer, "integer", PARM(x, text), XL_RINT(xl_text2int(x)), "")
PREFIX(IntToText, text, "text", PARM(x, integer), XL_RTEXT(xl_int2text(x)), "")
PREFIX(RealToText, text, "text", PARM(x, real), XL_RTEXT(xl_real2text(x)), "")

// Time computations
PREFIX(TimeHours, integer, "hours", PARM(t, integer), XL_RTIME(tm.tm_hour), "")
PREFIX(TimeMinutes, integer, "minutes", PARM(t, integer), XL_RTIME(tm.tm_min), "")
PREFIX(TimeSeconds, integer, "seconds", PARM(t, integer), XL_RTIME(tm.tm_sec), "")
PREFIX(TimeYear, integer, "year", PARM(t, integer), XL_RTIME(tm.tm_year + 1900), "")
PREFIX(TimeMonth, integer, "month", PARM(t, integer), XL_RTIME(tm.tm_mon), "")
PREFIX(TimeMonthDay, integer, "day", PARM(t, integer), XL_RTIME(tm.tm_mday), "")
PREFIX(TimeWeekDay, integer, "week_day", PARM(t, integer), XL_RTIME(tm.tm_wday), "")
PREFIX(TimeYearDay, integer, "year_day", PARM(t, integer), XL_RTIME(tm.tm_yday), "")

// Return hour, minutes, seconds for the current time
PREFIX(SystemTime, integer, "system_time",, XL_RINT(xl_time(1)), "")
PREFIX(SystemHours, integer, "hours",, XL_RCTIME(tm.tm_hour, 10), "")
PREFIX(SystemMinutes, integer, "minutes",, XL_RCTIME(tm.tm_min, 2), "")
PREFIX(SystemSeconds, integer, "seconds",, XL_RCTIME(tm.tm_sec, 0.5), "")
PREFIX(SystemYear, integer, "year",, XL_RCTIME(tm.tm_year + 1900, 10), "")
PREFIX(SystemMonth, integer, "month",, XL_RCTIME(tm.tm_mon, 10), "")
PREFIX(SystemMonthDay, integer, "day",, XL_RCTIME(tm.tm_mday, 10), "")
PREFIX(SystemWeekDay, integer, "week_day",, XL_RCTIME(tm.tm_wday, 10), "")
PREFIX(SystemYearDay, integer, "year_day",, XL_RCTIME(tm.tm_yday, 10), "")

// Random number generator
PREFIX(RandomNumber, real, "random", , XL_RREAL(xl_random(0.0, 1.0)), "")
PREFIX(RandomNumber2, real, "random", PARM(low, real) PARM(high, real),
       XL_RREAL(xl_random(XL_REAL(low), XL_REAL(high))), "")
PREFIX(RandomNumber2i, integer, "random", PARM(low,integer) PARM(high,integer),
       XL_RINT(xl_random(XL_INT(low), XL_INT(high))), "")

// Tree manipulations
PREFIX(DoCode,    tree, "do", PARM(code, source),
       return context->stack->Evaluate(&code), "")
PREFIX(ParseTree, tree, "parse_tree", PARM(c, source),
       Tree *code = &c;
       if (Block *block = code->AsBlock())
           code = block->child;
       return xl_parse_tree(context->stack, code), "")
PREFIX(BoundValue, tree, "bound", PARM(n, name),
       return xl_bound(context->stack, &n), "")
PREFIX(LoadFile, tree, "load", PARM(file, text),
       return xl_load(context->stack, file), "")
PREFIX(ImportFile, tree, "import", PARM(file, text),
       return xl_import(context->stack, file), "")
PREFIX(LoadCSV,  tree, "load_csv", PARM(f, text) PARM(p, text),
       return xl_load_data(context->stack, f, p, ",;", "\n\f\r"), "")
PREFIX(LoadTSV,  tree, "load_tsv", PARM(f, text) PARM(p, text),
       return xl_load_data(context->stack, f, p, "\t", "\n\f\r"), "")
PREFIX(LoadData,  tree, "load_data",
       PARM(f, text) PARM(p, text) PARM(fs, text) PARM(rs, text),
       return xl_load_data(context->stack, f, p, fs, rs), "")

PREFIX(Springify, real, "springify",
       PARM(v, real) PARM(tgt, real) PARM(t, real)
       PARM(d, real) PARM(k, real) PARM(lt, real) PARM(ls, real),
       return xl_springify(v, tgt, t, d, k, lt, ls), "")
PREFIX(ListFiles, tree, "files", PARM(pat, text),
       return xl_list_files(&pat),
       "List the files matching the pattern")
// Debugging code
PREFIX(DebugTree, tree, "debug", PARM(toDebug, source),
       std::cerr << "DEBUG: " << (Tree *) &toDebug << "\n";
       return xl_true, "")
PREFIX(EvaluationError, tree, "evaluation_error", PARM(e, source),
       return xl_form_error(context->stack, &e),
       "")
PREFIX(ErrorMsg3, tree, "error",
       PARM(m, text) PARM(a,source) PARM(b,source) PARM(c, source),
       return xl_error(m, &a, &b, &c), "")
PREFIX(ErrorMsg2, tree, "error",
       PARM(m, text) PARM(a,source) PARM(b, source),
       return xl_error(m, &a, &b), "")
PREFIX(ErrorMsg1, tree, "error", PARM(m, text) PARM(a, source),
       return xl_error(m, &a), "")
PREFIX(ErrorMsg0, tree, "error", PARM(m, text),
       return xl_error(m), "")
PREFIX(ExitProgram, boolean, "exit", PARM(c, integer),
       exit(XL_INT(c)); return xl_false, "")
PREFIX(WriteTree, tree, "write", PARM(toWrite, tree),
       return xl_write(context->stack, &toWrite, ""), "")
PREFIX(WriteLnTree, tree, "writeln", PARM(toWrite, tree),
       return xl_write(context->stack, &toWrite, "\n"), "")

// Compute the sha1 of a tree
PREFIX(ComputeSha1, text, "sha1", PARM(t, tree), XL_RTEXT(sha1(&t)), "")
