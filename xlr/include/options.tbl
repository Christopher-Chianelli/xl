// *****************************************************************************
// options.tbl                                                        XL project
// *****************************************************************************
//
// File description:
//
//     This table defines the options known to the compiler.
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2003,2009-2011,2013-2014,2017,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2010,2012, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
// Keywords:
// OPTVAR defines an option-controlling variable
// OPTION defines an option and associated code
// TRACE defines a trace
//
// Only the beginning of the option is checked for a match. The largest
// matching option is considered good, so short options should be first


// ============================================================================
//
//    XLR options
//
// ============================================================================

// Getting help on options
OPTION(help, "List usage information and exit", Usage(args[0].c_str()); exit(0))

// Rendering control
OPTVAR(stylesheet, text, "xl")
OPTION(style, "Select the stylesheet",
       stylesheet = STRING;
       Renderer::renderer->SelectStyleSheet(stylesheet + ".stylesheet"))

// Parse only
OPTVAR(parseOnly, bool, false)
OPTION(parse, "Only parse file, do not compile nor run", parseOnly = true)
OPTVAR(signedConstants, bool, false)
OPTION(signed, "Parse -1 as a constant, not unary minus prefix",
       signedConstants = true)
OPTVAR(showGV, bool, false)
OPTION(graphviz, "Generate Graphviz output", showGV = true)
OPTVAR(showSource, bool, false)
OPTION(show, "Show source file", showSource = true)

// Builtins file
OPTVAR(builtins, text, "builtins.xl")
OPTION(builtins, "Select the builtins file", builtins = STRING)

// Do not load builtins file
OPTION(nobuiltins, "Do not load builtins", builtins = "")

// Read or write from serialized format
OPTVAR(readSerialized, bool, false)
OPTION(read, "Read file from serialized input", readSerialized = true)
OPTVAR(writeSerialized, bool, false)
OPTION(write, "Write file to serialized output", writeSerialized = true)

// Compile only
OPTVAR(compileOnly, bool, false)
OPTION(compile, "Only compile file, do not run", compileOnly = true)

// Debug controlling options
OPTVAR(debug, bool, false)
OPTION(debug, "Compile with debugging information", debug=true)

// Warning-level option
OPTVAR(warning_level, uint, 0)
OPTION(warning, "Set the warning level, from 0 to 5",
       warning_level = INTEGER(0, 5))
OPTION(pedantic, "Set the maximum warning level",
       warning_level = 5)

// Optimize level options
// -O0 means interpreted, no LLVM compilation
// -O1 means old-style compilation, not fully optimized
// -O3 means new-style full compilation with type inference
OPTVAR(optimize_level, uint, 1)
OPTION(optimize_level, "Set the optimization level, from 0 to 3",
       optimize_level = INTEGER(0, 3);
       if (builtins != "" && optimize_level >= 3)
           builtins = "opt-" + builtins)
OPTION(O, "Short form for -optimize_level",
       optimize_level = INTEGER(0, 3);
       if (builtins != "" && optimize_level >= 3)
           builtins = "opt-" + builtins)
OPTVAR(verbose,bool,false)
OPTION(verbose, "Select more verbose error messages.", verbose = true)
OPTVAR(interpreted, bool, false)
OPTION(interpreted, "Select interpreted mode", interpreted = true)

// Stack depth
OPTVAR(stack_depth, uint, 1000)
OPTION(stack_depth, "Select the evaluation stack depth",
       stack_depth = INTEGER(50,25000)) // Experimentally, 52K max on MacOSX

// Output file
OPTVAR(output_file, std::string, "")
OPTION(output, "Select output file", output_file = STRING)

// Debug controlling options
OPTVAR(doDiff, bool, false)
OPTION(diff,
       "Compute difference of two parse trees "
       "(you must give exactly two input files)", doDiff=true)

OPTVAR(debugPrefix, text, "")
OPTION(debug_prefix, "Select the prefix to debug", debugPrefix = STRING)



// ============================================================================
//
//   Additional options
//
// ============================================================================

#include <options2.tbl>

// Undefine for next use...
#undef OPTVAR
#undef OPTION
#undef TRACE
