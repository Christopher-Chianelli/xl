
define i1 @xl_closure(%closure0*) {
allocas:
  %1 = call i1 @puts(i8* getelementptr inbounds ([6 x i8]* @text1, i32 0, i32 0))
  %2 = call i1 @puts(i8* getelementptr inbounds ([6 x i8]* @text2, i32 0, i32 0))
  ret i1 %2
}

define internal i1 @xl_eval_repeat3(%closure0*) {
allocas:
  %1 = getelementptr %closure0* %0, i32 0, i32 0
  %2 = load i1 (%closure0*)** %1
  %3 = call i1 %2(%closure0* %0)
  store i1 (%closure0*)* %2, i1 (%closure0*)** %1
  %4 = call i1 %2(%closure0* %0)
  store i1 (%closure0*)* %2, i1 (%closure0*)** %1
  %5 = call i1 %2(%closure0* %0)
  store i1 (%closure0*)* %2, i1 (%closure0*)** %1
  ret i1 %5
}

define i1 @xl_closure3(%closure1*) {
allocas:
  %1 = getelementptr %closure1* %0, i32 0, i32 1
  %2 = load %closure0** %1
  %3 = call i1 @xl_eval_repeat3(%closure0* %2)
  ret i1 %3
}

define internal i1 @xl_eval_repeat34(%closure1*) {
allocas:
  %1 = getelementptr %closure1* %0, i32 0, i32 0
  %2 = load i1 (%closure1*)** %1
  %3 = call i1 %2(%closure1* %0)
  store i1 (%closure1*)* %2, i1 (%closure1*)** %1
  %4 = call i1 %2(%closure1* %0)
  store i1 (%closure1*)* %2, i1 (%closure1*)** %1
  %5 = call i1 %2(%closure1* %0)
  store i1 (%closure1*)* %2, i1 (%closure1*)** %1
  ret i1 %5
}

define internal i1 @xl_eval_repeat9(%closure0*) {
allocas:
  %1 = alloca %closure1
  %2 = getelementptr %closure1* %1, i32 0, i32 0
  store i1 (%closure1*)* @xl_closure3, i1 (%closure1*)** %2
  %3 = getelementptr %closure1* %1, i32 0, i32 1
  store %closure0* %0, %closure0** %3
  %4 = call i1 @xl_eval_repeat34(%closure1* %1)
  ret i1 %4
}

define i1 @xl_closure5(%closure0*) {
allocas:
  %1 = call i1 @puts(i8* getelementptr inbounds ([10 x i8]* @text6, i32 0, i32 0))
  ret i1 %1
}

define i1 @xl_closure7(%closure1*) {
allocas:
  %1 = getelementptr %closure1* %0, i32 0, i32 1
  %2 = load %closure0** %1
  %3 = call i1 @xl_eval_repeat3(%closure0* %2)
  ret i1 %3
}

define internal i1 @xl_eval_repeat9a(%closure0*) {
allocas:
  %1 = alloca %closure1
  %2 = getelementptr %closure1* %1, i32 0, i32 0
  store i1 (%closure1*)* @xl_closure7, i1 (%closure1*)** %2
  %3 = getelementptr %closure1* %1, i32 0, i32 1
  store %closure0* %0, %closure0** %3
  %4 = call i1 @xl_eval_repeat34(%closure1* %1)
  ret i1 %4
}

define i1 @xl_closure8(%closure0*) {
allocas:
  %1 = call i1 @puts(i8* getelementptr inbounds ([8 x i8]* @text9, i32 0, i32 0))
  ret i1 %1
}

define i1 @xl_closure10(%closure0*) {
allocas:
  %1 = call i1 @puts(i8* getelementptr inbounds ([18 x i8]* @text11, i32 0, i32 0))
  ret i1 %1
}

define %Tree* @xl_program() {
allocas:
  %0 = alloca %closure0
  %1 = alloca %closure0
  %2 = alloca %closure0
  %3 = alloca %closure0
  %4 = getelementptr %closure0* %0, i32 0, i32 0
  store i1 (%closure0*)* @xl_closure, i1 (%closure0*)** %4
  %5 = call i1 @xl_eval_repeat9(%closure0* %0)
  %6 = getelementptr %closure0* %1, i32 0, i32 0
  store i1 (%closure0*)* @xl_closure5, i1 (%closure0*)** %6
  %7 = call i1 @xl_eval_repeat9a(%closure0* %1)
  %8 = getelementptr %closure0* %2, i32 0, i32 0
  store i1 (%closure0*)* @xl_closure8, i1 (%closure0*)** %8
  %9 = call i1 @xl_eval_repeat9(%closure0* %2)
  %10 = getelementptr %closure0* %3, i32 0, i32 0
  store i1 (%closure0*)* @xl_closure10, i1 (%closure0*)** %10
  %11 = call i1 @xl_eval_repeat3(%closure0* %3)
  br i1 %11, label %isTrue, label %isFalse

isTrue:                                           ; preds = %allocas
  %12 = load %Tree** @true
  br label %booleanBoxed

isFalse:                                          ; preds = %allocas
  %13 = load %Tree** @false
  br label %booleanBoxed

booleanBoxed:                                     ; preds = %isFalse, %isTrue
  %.0 = phi %Tree* [ %12, %isTrue ], [ %13, %isFalse ]
  ret %Tree* %.0
}
AFTER GLOBAL OPTIMIZATIONS:

define %Tree* @xl_program() {
allocas:
  %0 = alloca %closure1
  %1 = alloca %closure1
  %2 = alloca %closure1
  %3 = alloca %closure0
  %4 = alloca %closure0
  %5 = alloca %closure0
  %6 = bitcast %closure0* %3 to i1 (%closure0*)**
  store i1 (%closure0*)* @xl_closure, i1 (%closure0*)** %6
  %7 = bitcast %closure1* %2 to i1 (%closure1*)**
  store i1 (%closure1*)* @xl_closure3, i1 (%closure1*)** %7
  %8 = getelementptr %closure1* %2, i32 0, i32 1
  store %closure0* %3, %closure0** %8
  %9 = load i1 (%closure1*)** %7
  %10 = call i1 %9(%closure1* %2)
  store i1 (%closure1*)* %9, i1 (%closure1*)** %7
  %11 = call i1 %9(%closure1* %2)
  store i1 (%closure1*)* %9, i1 (%closure1*)** %7
  %12 = call i1 %9(%closure1* %2)
  %13 = bitcast %closure0* %4 to i1 (%closure0*)**
  store i1 (%closure0*)* @xl_closure5, i1 (%closure0*)** %13
  %14 = bitcast %closure1* %1 to i1 (%closure1*)**
  store i1 (%closure1*)* @xl_closure7, i1 (%closure1*)** %14
  %15 = getelementptr %closure1* %1, i32 0, i32 1
  store %closure0* %4, %closure0** %15
  %16 = load i1 (%closure1*)** %14
  %17 = call i1 %16(%closure1* %1)
  store i1 (%closure1*)* %16, i1 (%closure1*)** %14
  %18 = call i1 %16(%closure1* %1)
  store i1 (%closure1*)* %16, i1 (%closure1*)** %14
  %19 = call i1 %16(%closure1* %1)
  %20 = bitcast %closure0* %5 to i1 (%closure0*)**
  store i1 (%closure0*)* @xl_closure8, i1 (%closure0*)** %20
  %21 = bitcast %closure1* %0 to i1 (%closure1*)**
  store i1 (%closure1*)* @xl_closure3, i1 (%closure1*)** %21
  %22 = getelementptr %closure1* %0, i32 0, i32 1
  store %closure0* %5, %closure0** %22
  %23 = load i1 (%closure1*)** %21
  %24 = call i1 %23(%closure1* %0)
  store i1 (%closure1*)* %23, i1 (%closure1*)** %21
  %25 = call i1 %23(%closure1* %0)
  store i1 (%closure1*)* %23, i1 (%closure1*)** %21
  %26 = call i1 %23(%closure1* %0)
  %27 = call i1 @puts(i8* getelementptr inbounds ([18 x i8]* @text11, i32 0, i32 0))
  %28 = call i1 @puts(i8* getelementptr inbounds ([18 x i8]* @text11, i32 0, i32 0))
  %29 = call i1 @puts(i8* getelementptr inbounds ([18 x i8]* @text11, i32 0, i32 0))
  %true.val = load %Tree** @true
  %false.val = load %Tree** @false
  %.0 = select i1 %29, %Tree* %true.val, %Tree* %false.val
  ret %Tree* %.0
}
Hello
World
Hello
World
Hello
World
Hello
World
Hello
World
Hello
World
Hello
World
Hello
World
Hello
World
Glop glop
Glop glop
Glop glop
Glop glop
Glop glop
Glop glop
Glop glop
Glop glop
Glop glop
Tadaaa!
Tadaaa!
Tadaaa!
Tadaaa!
Tadaaa!
Tadaaa!
Tadaaa!
Tadaaa!
Tadaaa!
Bonjour le monde!
Bonjour le monde!
Bonjour le monde!
false
