
define i1 @xl_closure(%closure0*) {
allocas:
  %1 = call i1 @puts(i8* getelementptr inbounds ([6 x i8]* @text1, i32 0, i32 0))
  ret i1 %1
}

define internal %Tree* @xl_eval_repeat2(%closure0*) {
allocas:
  %1 = load %Tree** @true
  ret %Tree* %1
}

define internal i64 @xl_eval_repeat3(%closure0*) {
allocas:
  ret i64 42
}

define internal %Tree* @xl_eval_repeat(i64, %closure0*) {
allocas:
  %2 = getelementptr %closure0* %1, i32 0, i32 0
  %3 = load i1 (%closure0*)** %2
  %4 = call i1 %3(%closure0* %1)
  store i1 (%closure0*)* %3, i1 (%closure0*)** %2
  %5 = add i64 %0, -2
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %good, label %bad

done:                                             ; preds = %bad1, %good2, %good
  %loc.0 = phi %Tree* [ %8, %good ], [ %12, %good2 ], [ %9, %bad1 ]
  ret %Tree* %loc.0

bad:                                              ; preds = %allocas
  %7 = icmp eq i64 %5, 1
  br i1 %7, label %good2, label %bad1

good:                                             ; preds = %allocas
  %8 = call %Tree* @xl_eval_repeat2(%closure0* %1)
  br label %done

bad1:                                             ; preds = %bad
  %9 = call %Tree* @xl_eval_repeat(i64 %5, %closure0* %1)
  br label %done

good2:                                            ; preds = %bad
  %10 = call i64 @xl_eval_repeat3(%closure0* %1)
  %11 = call %Integer* @xl_new_integer(i64 %10)
  %12 = bitcast %Integer* %11 to %Tree*
  br label %done
}

define %Tree* @xl_program() {
allocas:
  %0 = alloca %closure0
  %1 = getelementptr %closure0* %0, i32 0, i32 0
  store i1 (%closure0*)* @xl_closure, i1 (%closure0*)** %1
  %2 = call %Tree* @xl_eval_repeat(i64 25, %closure0* %0)
  ret %Tree* %2
}
AFTER GLOBAL OPTIMIZATIONS:

define %Tree* @xl_program() {
allocas:
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %bad1.i, %allocas
  %lsr.iv = phi i64 [ %lsr.iv.next, %bad1.i ], [ 0, %allocas ]
  %0 = call i1 @puts(i8* getelementptr inbounds ([6 x i8]* @text1, i32 0, i32 0))
  switch i64 %lsr.iv, label %bad1.i [
    i64 -23, label %good.i
    i64 -22, label %good2.i
  ]

good.i:                                           ; preds = %tailrecurse.i
  %1 = load %Tree** @true
  ret %Tree* %1

bad1.i:                                           ; preds = %tailrecurse.i
  %lsr.iv.next = add i64 %lsr.iv, -2
  br label %tailrecurse.i

good2.i:                                          ; preds = %tailrecurse.i
  %2 = call %Integer* @xl_new_integer(i64 42)
  %3 = bitcast %Integer* %2 to %Tree*
  ret %Tree* %3
}
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
42
