// *****************************************************************************
// scope-rules.xl                                                     XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2010,2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
// Test the various scoping rules

// This is a global declaration of 'show'
show X -> writeln "Globally: ", X

// This is a transformation with a local definition
InnerTree1 Code:tree ->
    show X -> writeln "In InnerTree1: ", X
    writeln "Entering InnerTree1"
    Code
    writeln "Second in InnerTree1"
    Code
    writeln "Exiting InnerTree1"

// This is another transformation with another local definition
InnerTree2 Code:tree ->
    show X -> writeln "In InnerTree2: ", X
    writeln "Entering InnerTree2"
    Code
    writeln "Second in InnerTree2"
    Code
    writeln "Exiting InnerTree2"

// This is a declaration where we evaluate in the caller's context
InnerWithCode Code:code ->
    show X -> writeln "This shouldn't be used", X
    writeln "Entering InnerWithCode"
    Code
    writeln "Second in InnerWithCode"
    Code
    writeln "Exiting InnerWithCode"

// This is a declaration where we evaluate lazily in the caller's context
InnerWithLazy Code:lazy ->
    show X -> writeln "This shouldn't be used", X
    writeln "Entering InnerWithLazy"
    Code
    writeln "Second in InnerWithLazy"
    Code
    writeln "Exiting InnerWithLazy"



// Multiple uses of the same code
Outer Code:tree ->
    writeln "In Outer, calling InnerTree1"
    InnerTree1 Code
    writeln "Calling InnerTree2"
    InnerTree2 Code
    writeln "Evaluating in Outer"
    Code
    writeln "Calling InnerWithCode"
    InnerWithCode Code
    writeln "Calling InnerWithLazy"
    InnerWithLazy Code
    writeln "Done with Outer"

// Global counter
counter := 0

// Multiple calls with the same code
Outer
    counter := counter + 1
    show counter
