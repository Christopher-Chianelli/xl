// ****************************************************************************
//  remote.tbl                                                    XLR project
// ****************************************************************************
//
//   File Description:
//
//     Send commands to a remote host
//
//
//
//
//
//
//
//
// ****************************************************************************
//  (C) 2015 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2015 Taodyne SAS
// ****************************************************************************

FUNCTION(tell, integer,
         PARM(host, text)
         PARM(code, tree),
         tree_r &left = code;
         R_INT(xl_tell(host, &code)));

FUNCTION(ask, tree,
         PARM(host, text)
         PARM(code, tree),
         RESULT(xl_ask(host, &code)));

FUNCTION(invoke, tree,
         PARM(host, text)
         PARM(code, tree),
         Scope_p scope = DataScope(data);
         Context_p context = new Context(scope);
         RESULT(xl_invoke(context, host, &code)));

FUNCTION(reply, integer,
         PARM(code, tree),
         tree_r &left = code;
         Scope_p scope = DataScope(data);
         Context_p context = new Context(scope);
         // Must evaluate this ahead of time, otherwise the GC inside
         // may deallocate the new Integer that is in progress inside R_INT
         int reply = xl_reply(context, &code);
         R_INT(reply));

FUNCTION(listen_on, integer,
         PARM(port, integer),
         integer_r &left = port;
         Scope_p scope = DataScope(data);
         Context_p context = new Context(scope);
         R_INT(xl_listen(context, 0, port)));

FUNCTION(listen, integer, ,
         Scope_p scope = DataScope(data);
         Context_p context = new Context(scope);
         Tree_p leftP = DataSelf(data);
         Tree &left = *leftP;
         R_INT(xl_listen(context, 0)));

FUNCTION(listen_forking, integer, ,
         Scope_p scope = DataScope(data);
         Context_p context = new Context(scope);
         Tree_p leftP = DataSelf(data);
         Tree &left = *leftP;
         R_INT(xl_listen(context, MAIN->options.listen_forks)));

FUNCTION(listen_hook, tree,
         PARM(hook, tree),
         RESULT(xl_listen_hook(&hook)));

NAME_FN(ListenReceived, tree, "listen_received",
        RESULT(xl_listen_received()));

NAME_FN(GetPid, integer, "process_id",
        Tree_p leftP = DataSelf(data);
        Tree &left = *leftP;
        R_INT(getpid()));

