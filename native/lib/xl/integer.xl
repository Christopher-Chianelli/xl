// ****************************************************************************
//  xl.integer.xl                                   XL - An extensible language
// ****************************************************************************
//
//   File Description:
//
//     Basic integer type and arithmetic
//
//
//
//
//
//
//
//
// ****************************************************************************
//  (C) 2019 Christophe de Dinechin <christophe@dinechin.org>
//   This software is licensed under the GNU General Public License v3
//   See LICENSE file for details.
// ****************************************************************************

use XL.BOOLEAN

module XL.INTEGER[value:type] is
    x:value + y:value           as value        is builtin Add
    x:value - y:value           as value        is builtin Sub
    x:value * y:value           as value        is builtin Mul
    x:value / y:value           as value        is builtin SDiv
    x:value rem y:value         as value        is builtin SRem
    x:value mod y:value         as value        is builtin SMod
    x:value and y:value         as value        is builtin And
    x:value or y:value          as value        is builtin Or
    x:value xor y:value         as value        is builtin Xor
    x:value shl  y:unsigned     as value        is builtin Shl
    x:value shr  y:unsigned     as value        is builtin AShr
    x:value ashr y:unsigned     as value        is builtin AShr
    x:value lshr y:unsigned     as value        is builtin LShr
    -x:value                    as value        is builtin Neg
    not x:value                 as value        is builtin Not

    x:value ^ y:unsigned        as value        is
        result : value := 1
        while y > 0 loop
            if (y and 1) <> 0 then
                result *= x
            x *= x
            y := y ashr 1
        return result

    out x:value := y:value      as value        is builtin Copy

    in out x:value += y:value   as value        is x := x + y
    in out x:value -= y:value   as value        is x := x - y
    in out x:value *= y:value   as value        is x := x * y
    in out x:value /= y:value   as value        is x := x / y

    ++in out x:value            as value        is x += 1
    --in out x:value            as value        is x -= 1
    in out x:value++            as value        is { O is x; ++x; O }
    in out x:value--            as value        is { O is x; --x; O }

    X:value = Y:value           as boolean      is builtin ICmpEQ
    X:value <> Y:value          as boolean      is builtin ICmpNE
    X:value > Y:value           as boolean      is builtin ICmpSGT
    X:value >= Y:value          as boolean      is builtin ICmpSGE
    X:value < Y:value           as boolean      is builtin ICmpSLT
    X:value <= Y:value          as boolean      is builtin ICmpSLE

    bit_count X:value           as unsigned     is
        result := 0
        while X <> 0 loop
            if X and 1 <> 0 then
                result++
            X /= 2
        result

    low_bit X:value             as unsigned     is
        result := 0
        if X = 0 then
    high_bit X:value            as unsigned

module XL.INTEGER is
    type integer                                is builtin integer 64
    type integer1                               is builtin integer 1
    type integer8                               is builtin integer 8
    type integer16                              is builtin integer 16
    type integer32                              is builtin integer 32
    type integer64                              is builtin integer 64
    type integer128                             is builtin integer 128
    type integer_max                            is builtin integer 128

    type integer[Low..High] is
        num_bits is log2i
