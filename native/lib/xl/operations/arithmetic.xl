// ****************************************************************************
//  arithmetic.xl                                   XL - An extensible language
// ****************************************************************************
//
//   File Description:
//
//      Implementation of some arithmetic operations
//
//      This only provides defaults for operations that can be implemented
//      from base operations in the module
//
//      Notice that some of these implementation only exist for ordered types
//      and that some rely on 0 and 1 being valid arithmetic values
//
//
// ****************************************************************************
//  (C) 2019 Christophe de Dinechin <christophe@dinechin.org>
//   This software is licensed under the GNU General Public License v3
//   See LICENSE file for details.
// ****************************************************************************

import COMPARISON
use    BITWISE


with
    Value   : arithmetic
    Left    : arithmetic
    Right   : arithmetic
    Owned   : own arithmetic


Left mod Right as arithmetic where Right:ordered is
// ----------------------------------------------------------------------------
//    Default implementation of `mod` operation when there is an order
// ----------------------------------------------------------------------------

    // Check that the result of `rem` is itself ordered
    Result : (arithmetic and ordered) := Left rem Right

    // The following is legit because `ordered` provides `<` and 0 is arithmetic
    if Result < 0 then
        if Right < 0 then
            Result -= Right
        else
            Result += Right


Left ^ Power:unsigned as arithmetic is
// ----------------------------------------------------------------------------
//   Default implementaiton of exponentiation
// ----------------------------------------------------------------------------

    Result     : arithmetic := 1
    Multiplier : arithmetic := Left

    while Power <> 0 loop
        if (Power and 1) = 1 then
            Result *= Multiplier
        Multiplier *= Multiplier
        Power >>= 1


-Left as arithmetic is
// ----------------------------------------------------------------------------
//   Default implementation of negation
// ----------------------------------------------------------------------------
    0 - Left


Abs Value as arithmetic where Value:ordered is
// ----------------------------------------------------------------------------
//   Default implementation of absolute value for ordered types
// ----------------------------------------------------------------------------
    if Value < 0 then -Value else Value


Sign Value as arithmetic where Value:ordered is
// ----------------------------------------------------------------------------
//   Default implementation of sign for ordered types
// ----------------------------------------------------------------------------
    if Value < 0 then -1 else if Value > 0 then 1 else 0


++Owned as arithmetic is
// ----------------------------------------------------------------------------
//    Default implementation of pre-incrementation
// ----------------------------------------------------------------------------
    Owned += 1
    Owned


--Owned as arithmetic is
// ----------------------------------------------------------------------------
//    Default implementation of pre-decrementation
// ----------------------------------------------------------------------------
    Owned -= 1
    Owned


Owned++ as arithmetic is
// ----------------------------------------------------------------------------
//   Default implementation of post-incrementation
// ----------------------------------------------------------------------------
    Result : arithmetic is Owned
    Owned += 1


Owned-- as arithmetic is
// ----------------------------------------------------------------------------
//   Default implementation of post-decrementation
// ----------------------------------------------------------------------------
    Result : arithmetic is Owned
    Owned -= 1


Owned += Right as nil is
// ----------------------------------------------------------------------------
//   Default implementation of in-place addition
// ----------------------------------------------------------------------------
    Owned := Owned + Right


Owned -= Right as nil is
// ----------------------------------------------------------------------------
//   Default implementation of in-place subtraction
// ----------------------------------------------------------------------------
    Owned := Owned - Right


Owned *= Right as nil is
// ----------------------------------------------------------------------------
//   Default implementation of in-place multiplication
// ----------------------------------------------------------------------------
    Owned := Owned * Right


Owned /= Right as nil is
// ----------------------------------------------------------------------------
//   Default implementation of in-place division
// ----------------------------------------------------------------------------
    Owned := Owned / Right


0 as arithmetic is
// ----------------------------------------------------------------------------
//   Default implementation is to convert using some explicit conversion
// ----------------------------------------------------------------------------
    arithmetic 0


1 as arithmetic
// ----------------------------------------------------------------------------
//   Default implementation is to convert using some explicit conversion
// ----------------------------------------------------------------------------
    arithmetic 1
