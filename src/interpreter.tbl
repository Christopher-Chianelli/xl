// ****************************************************************************
//  interpreter.tbl                                              ELFE project
// ****************************************************************************
//
//   File Description:
//
//     Opcode interpretation
//
//     Normally, opcodes defined here should match those in llvm.tbl
//     although there is strictly speaking no reason other than
//     the convenience for maintaining builtins.elfe
//
//
//
//
// ****************************************************************************
//  (C) 2015 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2015 Taodyne SAS
// ****************************************************************************

BINARY(Add,     Integer, Integer, Integer,      R_INT ( LEFT +  RIGHT))
BINARY(FAdd,    Real,    Real,    Real,         R_REAL( LEFT +  RIGHT))
BINARY(Sub,     Integer, Integer, Integer,      R_INT ( LEFT -  RIGHT))
BINARY(FSub,    Real,    Real,    Real,         R_REAL( LEFT -  RIGHT))
BINARY(Mul,     Integer, Integer, Integer,      R_INT ( LEFT *  RIGHT))
BINARY(FMul,    Real,    Real,    Real,         R_REAL( LEFT *  RIGHT))
BINARY(UDiv,    Integer, Integer, Integer,      R_INT (ULEFT / URIGHT0))
BINARY(SDiv,    Integer, Integer, Integer,      R_INT ( LEFT /  RIGHT0))
BINARY(FDiv,    Real,    Real,    Real,         R_REAL( LEFT /  RIGHT0))
BINARY(URem,    Integer, Integer, Integer,      R_INT (ULEFT % URIGHT0))
BINARY(SRem,    Integer, Integer, Integer,      R_INT ( LEFT %  RIGHT0))
BINARY(FRem,    Real,    Real,    Real,         R_INT (fmod(LEFT,RIGHT0)))
BINARY(Shl,     Integer, Integer, Integer,      R_INT ( LEFT << RIGHT))
BINARY(LShr,    Integer, Integer, Integer,      R_INT (ULEFT >> RIGHT))
BINARY(AShr,    Integer, Integer, Integer,      R_INT ( LEFT >> RIGHT))
BINARY(And,     Integer, Integer, Integer,      R_INT ( LEFT &  RIGHT))
BINARY(Or,      Integer, Integer, Integer,      R_INT ( LEFT |  RIGHT))
BINARY(Xor,     Integer, Integer, Integer,      R_INT ( LEFT ^  RIGHT))

UNARY(Neg,      Integer, Integer,               R_INT (-LEFT))
UNARY(FNeg,     Real,    Real,                  R_REAL(-LEFT))
UNARY(Not,      Integer, Integer,               R_INT (~LEFT))

BINARY(ICmpEQ,  Name,    Integer, Integer,      R_BOOL( LEFT ==  RIGHT))
BINARY(ICmpNE,  Name,    Integer, Integer,      R_BOOL( LEFT !=  RIGHT))
BINARY(ICmpUGT, Name,    Integer, Integer,      R_BOOL(ULEFT >  URIGHT))
BINARY(ICmpUGE, Name,    Integer, Integer,      R_BOOL(ULEFT >= URIGHT))
BINARY(ICmpULT, Name,    Integer, Integer,      R_BOOL(ULEFT <  URIGHT))
BINARY(ICmpULE, Name,    Integer, Integer,      R_BOOL(ULEFT <= URIGHT))
BINARY(ICmpSGT, Name,    Integer, Integer,      R_BOOL( LEFT >   RIGHT))
BINARY(ICmpSGE, Name,    Integer, Integer,      R_BOOL( LEFT >=  RIGHT))
BINARY(ICmpSLT, Name,    Integer, Integer,      R_BOOL( LEFT <   RIGHT))
BINARY(ICmpSLE, Name,    Integer, Integer,      R_BOOL( LEFT <=  RIGHT))

// The following relies on 'true' > 'false' alphabetically!!!
BINARY(BCmpEQ,  Name,    Name,    Name,         R_BOOL( LEFT ==  RIGHT))
BINARY(BCmpNE,  Name,    Name,    Name,         R_BOOL( LEFT !=  RIGHT))
BINARY(BCmpGT,  Name,    Name,    Name,         R_BOOL( LEFT >   RIGHT))
BINARY(BCmpGE,  Name,    Name,    Name,         R_BOOL( LEFT >=  RIGHT))
BINARY(BCmpLT,  Name,    Name,    Name,         R_BOOL( LEFT <   RIGHT))
BINARY(BCmpLE,  Name,    Name,    Name,         R_BOOL( LEFT <=  RIGHT))

BINARY(FCmpOEQ, Name,    Real,    Real,         R_BOOL(LEFT == RIGHT))
BINARY(FCmpONE, Name,    Real,    Real,         R_BOOL(LEFT != RIGHT))
BINARY(FCmpOGT, Name,    Real,    Real,         R_BOOL(LEFT >  RIGHT))
BINARY(FCmpOGE, Name,    Real,    Real,         R_BOOL(LEFT >= RIGHT))
BINARY(FCmpOLT, Name,    Real,    Real,         R_BOOL(LEFT <  RIGHT))
BINARY(FCmpOLE, Name,    Real,    Real,         R_BOOL(LEFT <= RIGHT))

// BINARY(FCmpORD, Name,    Real,    Real,         R_BOOL(LEFT == RIGHT))
// BINARY(FCmpUNO, Name,    Real,    Real,         R_BOOL(LEFT == RIGHT))

BINARY(FCmpUEQ, Name,    Real,    Real,         R_BOOL(LEFT == RIGHT))
BINARY(FCmpUNE, Name,    Real,    Real,         R_BOOL(LEFT != RIGHT))
BINARY(FCmpUGT, Name,    Real,    Real,         R_BOOL(LEFT >  RIGHT))
BINARY(FCmpUGE, Name,    Real,    Real,         R_BOOL(LEFT >= RIGHT))
BINARY(FCmpULT, Name,    Real,    Real,         R_BOOL(LEFT <  RIGHT))
BINARY(FCmpULE, Name,    Real,    Real,         R_BOOL(LEFT <= RIGHT))

BINARY(BCmpUEQ, Name,    Name,    Name,         R_BOOL(LEFT_B ==  RIGHT_B))
BINARY(BCmpUNE, Name,    Name,    Name,         R_BOOL(LEFT_B !=  RIGHT_B))
BINARY(BCmpUGT, Name,    Name,    Name,         R_BOOL(LEFT_B >   RIGHT_B))
BINARY(BCmpUGE, Name,    Name,    Name,         R_BOOL(LEFT_B >=  RIGHT_B))
BINARY(BCmpULT, Name,    Name,    Name,         R_BOOL(LEFT_B <   RIGHT_B))
BINARY(BCmpULE, Name,    Name,    Name,         R_BOOL(LEFT_B <=  RIGHT_B))
BINARY(BAnd,    Name,    Name,    Name,         R_BOOL(LEFT_B and RIGHT_B))
BINARY(BOr,     Name,    Name,    Name,         R_BOOL(LEFT_B or  RIGHT_B))
BINARY(BXor,    Name,    Name,    Name,         R_BOOL(LEFT_B xor RIGHT_B))
UNARY(BNot,     Name,    Name,                  R_BOOL(not LEFT_B))


// ============================================================================
// 
//   Special opcodes that perform ELFE-specific operations
// 
// ============================================================================

UNARY(TreeKind,         Integer, Tree,          R_INT (left.Kind()))
UNARY(TreeLeft,         Tree,    Prefix,        RESULT(left.left))
UNARY(TreeRight,        Tree,    Prefix,        RESULT(left.right))
UNARY(InfixName,        Text,    Infix,         R_TEXT(left.name))
UNARY(TextOpening,      Text,    Text,          R_TEXT(left.opening))
UNARY(TextClosing,      Text,    Text,          R_TEXT(left.closing))
UNARY(BlockChild,       Tree,    Block,         RESULT(left.child))
UNARY(BlockOpening,     Text,    Block,         R_TEXT(left.opening))
UNARY(BlockClosing,     Text,    Block,         R_TEXT(left.closing))
