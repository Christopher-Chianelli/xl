// ****************************************************************************
//  llvm.tbl                                                      XL project
// ****************************************************************************
//
//   File Description:
//
//    Description of all the LLVM operators we support from rewrite forms
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License, with the
// following clarification and exception.
//
// Linking this library statically or dynamically with other modules is making
// a combined work based on this library. Thus, the terms and conditions of the
// GNU General Public License cover the whole combination.
//
// As a special exception, the copyright holders of this library give you
// permission to link this library with independent modules to produce an
// executable, regardless of the license terms of these independent modules,
// and to copy and distribute the resulting executable under terms of your
// choice, provided that you also meet, for each linked independent module,
// the terms and conditions of the license of that module. An independent
// module is a module which is not derived from or based on this library.
// If you modify this library, you may extend this exception to your version
// of the library, but you are not obliged to do so. If you do not wish to
// do so, delete this exception statement from your version.
//
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************

// ============================================================================
//
//   Standard LLVM opcodes
//
// ============================================================================

BINARY(Add)
BINARY(FAdd)
BINARY(Sub)
BINARY(FSub)
BINARY(Mul)
BINARY(FMul)
BINARY(UDiv)
BINARY(SDiv)
BINARY(ExactSDiv)
BINARY(FDiv)
BINARY(URem)
BINARY(SRem)
BINARY(Shl)
BINARY(LShr)
BINARY(AShr)
BINARY(And)
BINARY(Or)
BINARY(Xor)

UNARY(Neg)
UNARY(FNeg)
UNARY(Not)

UNARY(Load)
BINARY(Store)
BINARY(GEP)

BINARY(ICmpEQ)
BINARY(ICmpNE)
BINARY(ICmpUGT)
BINARY(ICmpUGE)
BINARY(ICmpULT)
BINARY(ICmpULE)
BINARY(ICmpSGT)
BINARY(ICmpSGE)
BINARY(ICmpSLT)
BINARY(ICmpSLE)

ALIAS(BCmpEQ, 2, ICmpEQ)
ALIAS(BCmpNE, 2, ICmpNE)
ALIAS(BCmpGT, 2, ICmpUGT)
ALIAS(BCmpGE, 2, ICmpUGE)
ALIAS(BCmpLT, 2, ICmpULT)
ALIAS(BCmpLE, 2, ICmpULE)

ALIAS(BAnd,   2, And)
ALIAS(BOr,    2, Or)
ALIAS(BXor,   2, Xor)
ALIAS(BNot,   1, Not)

BINARY(FCmpOEQ)
BINARY(FCmpONE)
BINARY(FCmpOGT)
BINARY(FCmpOGE)
BINARY(FCmpOLT)
BINARY(FCmpOLE)

BINARY(FCmpORD)
BINARY(FCmpUNO)

BINARY(FCmpUEQ)
BINARY(FCmpUNE)
BINARY(FCmpUGT)
BINARY(FCmpUGE)
BINARY(FCmpULT)
BINARY(FCmpULE)


// ============================================================================
//
//   Special opcodes that perform XL-specific operations
//
// ============================================================================

SPECIAL(TreeKind, 1,
// ----------------------------------------------------------------------------
//   Return the kind for the input tree
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.treePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       treeValue,
                                                       TAG_INDEX,
                                                       "tagp");
        llvm_value tag = bld->CreateLoad(ptr, "tag");
        llvm_value mask = llvm::ConstantInt::get(tag->getType(),
                                                 Tree::KINDMASK);
        llvm_value kind = bld->CreateAnd(tag, mask, "tagAndMask");
        return kind;
    )


SPECIAL(TreeLeft, 1,
// ----------------------------------------------------------------------------
//   Return the left for an infix, prefix, or postfix trees
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.treePtrTy);
        llvm_value prefixValue = bld->CreateBitCast(treeValue,
                                                    compiler.prefixTreePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       prefixValue,
                                                       LEFT_VALUE_INDEX,
                                                       "leftp");
        llvm_value result = bld->CreateLoad(ptr, "left");
        return result;
    )


SPECIAL(TreeRight, 1,
// ----------------------------------------------------------------------------
//   Return the right for the infix, prefix or postfix trees
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.treePtrTy);
        llvm_value prefixValue = bld->CreateBitCast(treeValue,
                                                    compiler.prefixTreePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       prefixValue,
                                                       RIGHT_VALUE_INDEX,
                                                       "rightp");
        llvm_value result = bld->CreateLoad(ptr, "right");
        return result;
    )


SPECIAL(InfixName, 1,
// ----------------------------------------------------------------------------
//   Return the name for an infix tree
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.treePtrTy);
        llvm_value infixValue = bld->CreateBitCast(treeValue,
                                                    compiler.infixTreePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       infixValue,
                                                       INFIX_NAME_INDEX,
                                                       "namep");
        llvm_value result = bld->CreateLoad(ptr, "name");
        return result;
    )


SPECIAL(TextOpening, 1,
// ----------------------------------------------------------------------------
//   Return the text opening for a text tree
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.treePtrTy);
        llvm_value textValue = bld->CreateBitCast(treeValue,
                                                  compiler.textTreePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       textValue,
                                                       TEXT_OPENING_INDEX, "opPtr");
        llvm_value result = bld->CreateLoad(ptr, "opening");
        return result;
    )


SPECIAL(TextClosing, 1,
// ----------------------------------------------------------------------------
//   Return the text closing for a text tree
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.treePtrTy);
        llvm_value textValue = bld->CreateBitCast(treeValue,
                                                  compiler.textTreePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       textValue,
                                                       TEXT_CLOSING_INDEX,
                                                       "closingp");
        llvm_value result = bld->CreateLoad(ptr, "closing");
        return result;
    )


SPECIAL(BlockChild, 1,
// ----------------------------------------------------------------------------
//   Return the child for a block tree
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.textTreePtrTy);
        llvm_value blockValue = bld->CreateBitCast(treeValue,
                                                   compiler.blockTreePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       blockValue,
                                                       BLOCK_CHILD_INDEX,
                                                       "childp");
        llvm_value result = bld->CreateLoad(ptr, "child");
        return result;
    )


SPECIAL(BlockOpening, 1,
// ----------------------------------------------------------------------------
//   Return the opening text for a block tree
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.textTreePtrTy);
        llvm_value blockValue = bld->CreateBitCast(treeValue,
                                                   compiler.blockTreePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       blockValue,
                                                       BLOCK_OPENING_INDEX,
                                                       "bopenp");
        llvm_value result = bld->CreateLoad(ptr, "bopen");
        return result;
    )


SPECIAL(BlockClosing, 1,
// ----------------------------------------------------------------------------
//   Return the closing text for a block tree
// ----------------------------------------------------------------------------
        llvm_value treeValue = unit.Autobox(args[0], compiler.textTreePtrTy);
        llvm_value blockValue = bld->CreateBitCast(treeValue,
                                                   compiler.blockTreePtrTy);
        llvm_value ptr = compiler.llvm.CreateStructGEP(bld,
                                                       blockValue,
                                                       BLOCK_CLOSING_INDEX,
                                                       "bclosep");
        llvm_value result = bld->CreateLoad(ptr, "bclose");
        return result;
    )



#undef UNARY
#undef BINARY
#undef SPECIAL
#undef ALIAS
